
PersistentVariablesInRam_L476RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004568  08004568  00014568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004658  08004658  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004660  08004660  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004664  08004664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  080046d8  00020070  2**2
                  ALLOC
 10 .noinit       00000008  2000014c  080046d8  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  080046d8  00020154  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd22  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc8  00000000  00000000  0002bdc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  0002da90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000950  00000000  00000000  0002e4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f63  00000000  00000000  0002edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c6c2  00000000  00000000  00055d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb9c3  00000000  00000000  0006241d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014dde0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f9c  00000000  00000000  0014de30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004550 	.word	0x08004550

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004550 	.word	0x08004550

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fb0e 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f828 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f8ca 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f898 	bl	80006b8 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000588:	f000 f874 	bl	8000674 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  persistent_variables_init();
 800058c:	f000 f92a 	bl	80007e4 <persistent_variables_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    printf("counter: %lu\r\n", counter);
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <main+0x4c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	480b      	ldr	r0, [pc, #44]	; (80005c4 <main+0x50>)
 8000598:	f003 f84c 	bl	8003634 <iprintf>
    counter++;
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <main+0x4c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <main+0x4c>)
 80005a4:	6013      	str	r3, [r2, #0]
    counter_crc = HAL_CRC_Calculate(&hcrc, &counter, 1);
 80005a6:	2201      	movs	r2, #1
 80005a8:	4905      	ldr	r1, [pc, #20]	; (80005c0 <main+0x4c>)
 80005aa:	4807      	ldr	r0, [pc, #28]	; (80005c8 <main+0x54>)
 80005ac:	f000 fcde 	bl	8000f6c <HAL_CRC_Calculate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a06      	ldr	r2, [pc, #24]	; (80005cc <main+0x58>)
 80005b4:	6013      	str	r3, [r2, #0]
    HAL_Delay(1000);
 80005b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ba:	f000 fb69 	bl	8000c90 <HAL_Delay>
    printf("counter: %lu\r\n", counter);
 80005be:	e7e7      	b.n	8000590 <main+0x1c>
 80005c0:	2000014c 	.word	0x2000014c
 80005c4:	08004568 	.word	0x08004568
 80005c8:	2000008c 	.word	0x2000008c
 80005cc:	20000150 	.word	0x20000150

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	; 0x58
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2244      	movs	r2, #68	; 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 f820 	bl	8003624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f6:	f001 f823 	bl	8001640 <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000600:	f000 f936 	bl	8000870 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	2310      	movs	r3, #16
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800061e:	230a      	movs	r3, #10
 8000620:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000622:	2307      	movs	r3, #7
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4618      	mov	r0, r3
 8000634:	f001 f85a 	bl	80016ec <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800063e:	f000 f917 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2303      	movs	r3, #3
 8000648:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	2104      	movs	r1, #4
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fc22 	bl	8001ea4 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000666:	f000 f903 	bl	8000870 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3758      	adds	r7, #88	; 0x58
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_CRC_Init+0x3c>)
 800067a:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <MX_CRC_Init+0x40>)
 800067c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_CRC_Init+0x3c>)
 8000680:	2200      	movs	r2, #0
 8000682:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_CRC_Init+0x3c>)
 8000686:	2200      	movs	r2, #0
 8000688:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_CRC_Init+0x3c>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <MX_CRC_Init+0x3c>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_CRC_Init+0x3c>)
 8000698:	2201      	movs	r2, #1
 800069a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_CRC_Init+0x3c>)
 800069e:	f000 fc01 	bl	8000ea4 <HAL_CRC_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006a8:	f000 f8e2 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000008c 	.word	0x2000008c
 80006b4:	40023000 	.word	0x40023000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <MX_USART2_UART_Init+0x5c>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006fc:	f002 fab2 	bl	8002c64 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f8b3 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000b0 	.word	0x200000b0
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a2a      	ldr	r2, [pc, #168]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_GPIO_Init+0xc4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a24      	ldr	r2, [pc, #144]	; (80007dc <MX_GPIO_Init+0xc4>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a1e      	ldr	r2, [pc, #120]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_GPIO_Init+0xc4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a18      	ldr	r2, [pc, #96]	; (80007dc <MX_GPIO_Init+0xc4>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2120      	movs	r1, #32
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f000 ff2d 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <MX_GPIO_Init+0xc8>)
 80007b2:	f000 fd75 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b6:	2320      	movs	r3, #32
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f000 fd66 	bl	80012a0 <HAL_GPIO_Init>

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	; 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000800 	.word	0x48000800

080007e4 <persistent_variables_init>:

/* USER CODE BEGIN 4 */
static void persistent_variables_init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  if (HAL_CRC_Calculate(&hcrc, &counter, 1) != counter_crc)
 80007e8:	2201      	movs	r2, #1
 80007ea:	490b      	ldr	r1, [pc, #44]	; (8000818 <persistent_variables_init+0x34>)
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <persistent_variables_init+0x38>)
 80007ee:	f000 fbbd 	bl	8000f6c <HAL_CRC_Calculate>
 80007f2:	4602      	mov	r2, r0
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <persistent_variables_init+0x3c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d00a      	beq.n	8000812 <persistent_variables_init+0x2e>
  {
    counter = 0;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <persistent_variables_init+0x34>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
    counter_crc = HAL_CRC_Calculate(&hcrc, &counter, 1);
 8000802:	2201      	movs	r2, #1
 8000804:	4904      	ldr	r1, [pc, #16]	; (8000818 <persistent_variables_init+0x34>)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <persistent_variables_init+0x38>)
 8000808:	f000 fbb0 	bl	8000f6c <HAL_CRC_Calculate>
 800080c:	4603      	mov	r3, r0
 800080e:	4a04      	ldr	r2, [pc, #16]	; (8000820 <persistent_variables_init+0x3c>)
 8000810:	6013      	str	r3, [r2, #0]
  }
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000014c 	.word	0x2000014c
 800081c:	2000008c 	.word	0x2000008c
 8000820:	20000150 	.word	0x20000150

08000824 <_write>:

int _write(int handle, char* data, int size)
{
 8000824:	b480      	push	{r7}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  int count = size;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	617b      	str	r3, [r7, #20]
  while (count--)
 8000834:	e00d      	b.n	8000852 <_write+0x2e>
  {
    while (!(USART2->ISR & USART_ISR_TXE)) __NOP();
 8000836:	bf00      	nop
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <_write+0x48>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000840:	2b00      	cmp	r3, #0
 8000842:	d0f8      	beq.n	8000836 <_write+0x12>
    USART2->TDR = *data++;
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	60ba      	str	r2, [r7, #8]
 800084a:	781a      	ldrb	r2, [r3, #0]
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <_write+0x48>)
 800084e:	b292      	uxth	r2, r2
 8000850:	851a      	strh	r2, [r3, #40]	; 0x28
  while (count--)
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	617a      	str	r2, [r7, #20]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1ed      	bne.n	8000838 <_write+0x14>
  }
  return size;
 800085c:	687b      	ldr	r3, [r7, #4]
}
 800085e:	4618      	mov	r0, r3
 8000860:	371c      	adds	r7, #28
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40004400 	.word	0x40004400

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_MspInit+0x44>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6613      	str	r3, [r2, #96]	; 0x60
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_MspInit+0x44>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_MspInit+0x44>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6593      	str	r3, [r2, #88]	; 0x58
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x44>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_CRC_MspInit+0x38>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d10b      	bne.n	80008ee <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_CRC_MspInit+0x3c>)
 80008d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008da:	4a09      	ldr	r2, [pc, #36]	; (8000900 <HAL_CRC_MspInit+0x3c>)
 80008dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008e0:	6493      	str	r3, [r2, #72]	; 0x48
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <HAL_CRC_MspInit+0x3c>)
 80008e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023000 	.word	0x40023000
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b0ac      	sub	sp, #176	; 0xb0
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2288      	movs	r2, #136	; 0x88
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f002 fe7d 	bl	8003624 <memset>
  if(huart->Instance==USART2)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a21      	ldr	r2, [pc, #132]	; (80009b4 <HAL_UART_MspInit+0xb0>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d13b      	bne.n	80009ac <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000934:	2302      	movs	r3, #2
 8000936:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000938:	2300      	movs	r3, #0
 800093a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fcd3 	bl	80022ec <HAL_RCCEx_PeriphCLKConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800094c:	f7ff ff90 	bl	8000870 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <HAL_UART_MspInit+0xb4>)
 8000952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000954:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <HAL_UART_MspInit+0xb4>)
 8000956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095a:	6593      	str	r3, [r2, #88]	; 0x58
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <HAL_UART_MspInit+0xb4>)
 800095e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <HAL_UART_MspInit+0xb4>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096c:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <HAL_UART_MspInit+0xb4>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_UART_MspInit+0xb4>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000980:	230c      	movs	r3, #12
 8000982:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000998:	2307      	movs	r3, #7
 800099a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f000 fc7a 	bl	80012a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ac:	bf00      	nop
 80009ae:	37b0      	adds	r7, #176	; 0xb0
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40004400 	.word	0x40004400
 80009b8:	40021000 	.word	0x40021000

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 f922 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	e00a      	b.n	8000a38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a22:	f3af 8000 	nop.w
 8000a26:	4601      	mov	r1, r0
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	b2ca      	uxtb	r2, r1
 8000a30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf0      	blt.n	8000a22 <_read+0x12>
  }

  return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a72:	605a      	str	r2, [r3, #4]
  return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_isatty>:

int _isatty(int file)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <_sbrk+0x5c>)
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <_sbrk+0x60>)
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <_sbrk+0x64>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <_sbrk+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d207      	bcs.n	8000af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae4:	f002 fd74 	bl	80035d0 <__errno>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	220c      	movs	r2, #12
 8000aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	e009      	b.n	8000b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <_sbrk+0x64>)
 8000b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20018000 	.word	0x20018000
 8000b14:	00000400 	.word	0x00000400
 8000b18:	20000134 	.word	0x20000134
 8000b1c:	20000158 	.word	0x20000158

08000b20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b48:	f7ff ffea 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b4c:	480c      	ldr	r0, [pc, #48]	; (8000b80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4e:	490d      	ldr	r1, [pc, #52]	; (8000b84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <LoopForever+0xe>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b64:	4c0a      	ldr	r4, [pc, #40]	; (8000b90 <LoopForever+0x16>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b72:	f002 fd33 	bl	80035dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b76:	f7ff fcfd 	bl	8000574 <main>

08000b7a <LoopForever>:

LoopForever:
    b LoopForever
 8000b7a:	e7fe      	b.n	8000b7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b88:	08004668 	.word	0x08004668
  ldr r2, =_sbss
 8000b8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b90:	2000014c 	.word	0x2000014c

08000b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_2_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_Init+0x3c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <HAL_Init+0x3c>)
 8000ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bae:	2003      	movs	r0, #3
 8000bb0:	f000 f944 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 f80f 	bl	8000bd8 <HAL_InitTick>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d002      	beq.n	8000bc6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	e001      	b.n	8000bca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc6:	f7ff fe59 	bl	800087c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bca:	79fb      	ldrb	r3, [r7, #7]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40022000 	.word	0x40022000

08000bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_InitTick+0x6c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d023      	beq.n	8000c34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_InitTick+0x70>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_InitTick+0x6c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f941 	bl	8000e8a <HAL_SYSTICK_Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10f      	bne.n	8000c2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d809      	bhi.n	8000c28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f000 f919 	bl	8000e52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_InitTick+0x74>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e007      	b.n	8000c38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e004      	b.n	8000c38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]
 8000c32:	e001      	b.n	8000c38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x20>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x24>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_IncTick+0x24>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000138 	.word	0x20000138

08000c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_GetTick+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000138 	.word	0x20000138

08000c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c98:	f7ff ffee 	bl	8000c78 <HAL_GetTick>
 8000c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca8:	d005      	beq.n	8000cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_Delay+0x44>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb6:	bf00      	nop
 8000cb8:	f7ff ffde 	bl	8000c78 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d8f7      	bhi.n	8000cb8 <HAL_Delay+0x28>
  {
  }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	; (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ff8e 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff47 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff5c 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff8e 	bl	8000d90 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff5d 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffb0 	bl	8000df8 <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e054      	b.n	8000f60 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7f5b      	ldrb	r3, [r3, #29]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d105      	bne.n	8000ecc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fcfc 	bl	80008c4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	791b      	ldrb	r3, [r3, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <HAL_CRC_Init+0xc4>)
 8000ee0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0218 	bic.w	r2, r2, #24
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	e00c      	b.n	8000f0e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6899      	ldr	r1, [r3, #8]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	461a      	mov	r2, r3
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 f948 	bl	8001194 <HAL_CRCEx_Polynomial_Set>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e028      	b.n	8000f60 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	795b      	ldrb	r3, [r3, #5]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d105      	bne.n	8000f22 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1e:	611a      	str	r2, [r3, #16]
 8000f20:	e004      	b.n	8000f2c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	6912      	ldr	r2, [r2, #16]
 8000f2a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	695a      	ldr	r2, [r3, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	699a      	ldr	r2, [r3, #24]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	04c11db7 	.word	0x04c11db7

08000f6c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2202      	movs	r2, #2
 8000f80:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f042 0201 	orr.w	r2, r2, #1
 8000f90:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d006      	beq.n	8000fa8 <HAL_CRC_Calculate+0x3c>
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d829      	bhi.n	8000ff2 <HAL_CRC_Calculate+0x86>
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d019      	beq.n	8000fd6 <HAL_CRC_Calculate+0x6a>
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d01e      	beq.n	8000fe4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8000fa6:	e024      	b.n	8000ff2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	e00a      	b.n	8000fc4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	441a      	add	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d3f0      	bcc.n	8000fae <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
      break;
 8000fd4:	e00e      	b.n	8000ff4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f000 f812 	bl	8001004 <CRC_Handle_8>
 8000fe0:	6138      	str	r0, [r7, #16]
      break;
 8000fe2:	e007      	b.n	8000ff4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f000 f899 	bl	8001120 <CRC_Handle_16>
 8000fee:	6138      	str	r0, [r7, #16]
      break;
 8000ff0:	e000      	b.n	8000ff4 <HAL_CRC_Calculate+0x88>
      break;
 8000ff2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8000ffa:	693b      	ldr	r3, [r7, #16]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	e023      	b.n	800105e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	4413      	add	r3, r2
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	3301      	adds	r3, #1
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	440b      	add	r3, r1
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001030:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	440b      	add	r3, r1
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001040:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	3303      	adds	r3, #3
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	440b      	add	r3, r1
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001054:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001056:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	3301      	adds	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	69fa      	ldr	r2, [r7, #28]
 8001064:	429a      	cmp	r2, r3
 8001066:	d3d6      	bcc.n	8001016 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d04d      	beq.n	800110e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b01      	cmp	r3, #1
 800107a:	d107      	bne.n	800108c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	4413      	add	r3, r2
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d116      	bne.n	80010c4 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	3301      	adds	r3, #1
 80010aa:	68b9      	ldr	r1, [r7, #8]
 80010ac:	440b      	add	r3, r1
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	8b7a      	ldrh	r2, [r7, #26]
 80010c2:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d11f      	bne.n	800110e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	3301      	adds	r3, #1
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	440b      	add	r3, r1
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	8b7a      	ldrh	r2, [r7, #26]
 80010fa:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	4413      	add	r3, r2
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3724      	adds	r7, #36	; 0x24
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e013      	b.n	800115a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	4413      	add	r3, r2
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	440b      	add	r3, r1
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	085b      	lsrs	r3, r3, #1
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	429a      	cmp	r2, r3
 8001162:	d3e6      	bcc.n	8001132 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d009      	beq.n	8001182 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	4413      	add	r3, r2
 800117c:	881a      	ldrh	r2, [r3, #0]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80011a4:	231f      	movs	r3, #31
 80011a6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80011a8:	bf00      	nop
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1e5a      	subs	r2, r3, #1
 80011ae:	613a      	str	r2, [r7, #16]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d009      	beq.n	80011c8 <HAL_CRCEx_Polynomial_Set+0x34>
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b18      	cmp	r3, #24
 80011cc:	d846      	bhi.n	800125c <HAL_CRCEx_Polynomial_Set+0xc8>
 80011ce:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80011d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d4:	08001263 	.word	0x08001263
 80011d8:	0800125d 	.word	0x0800125d
 80011dc:	0800125d 	.word	0x0800125d
 80011e0:	0800125d 	.word	0x0800125d
 80011e4:	0800125d 	.word	0x0800125d
 80011e8:	0800125d 	.word	0x0800125d
 80011ec:	0800125d 	.word	0x0800125d
 80011f0:	0800125d 	.word	0x0800125d
 80011f4:	08001251 	.word	0x08001251
 80011f8:	0800125d 	.word	0x0800125d
 80011fc:	0800125d 	.word	0x0800125d
 8001200:	0800125d 	.word	0x0800125d
 8001204:	0800125d 	.word	0x0800125d
 8001208:	0800125d 	.word	0x0800125d
 800120c:	0800125d 	.word	0x0800125d
 8001210:	0800125d 	.word	0x0800125d
 8001214:	08001245 	.word	0x08001245
 8001218:	0800125d 	.word	0x0800125d
 800121c:	0800125d 	.word	0x0800125d
 8001220:	0800125d 	.word	0x0800125d
 8001224:	0800125d 	.word	0x0800125d
 8001228:	0800125d 	.word	0x0800125d
 800122c:	0800125d 	.word	0x0800125d
 8001230:	0800125d 	.word	0x0800125d
 8001234:	08001239 	.word	0x08001239
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	2b06      	cmp	r3, #6
 800123c:	d913      	bls.n	8001266 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001242:	e010      	b.n	8001266 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	2b07      	cmp	r3, #7
 8001248:	d90f      	bls.n	800126a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800124e:	e00c      	b.n	800126a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	d90b      	bls.n	800126e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800125a:	e008      	b.n	800126e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	75fb      	strb	r3, [r7, #23]
      break;
 8001260:	e006      	b.n	8001270 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001262:	bf00      	nop
 8001264:	e004      	b.n	8001270 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001266:	bf00      	nop
 8001268:	e002      	b.n	8001270 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800126a:	bf00      	nop
 800126c:	e000      	b.n	8001270 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800126e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10d      	bne.n	8001292 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f023 0118 	bic.w	r1, r3, #24
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	430a      	orrs	r2, r1
 8001290:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001292:	7dfb      	ldrb	r3, [r7, #23]
}
 8001294:	4618      	mov	r0, r3
 8001296:	371c      	adds	r7, #28
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ae:	e17f      	b.n	80015b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8171 	beq.w	80015aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d005      	beq.n	80012e0 <HAL_GPIO_Init+0x40>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d130      	bne.n	8001342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001316:	2201      	movs	r2, #1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f003 0201 	and.w	r2, r3, #1
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b03      	cmp	r3, #3
 800134c:	d118      	bne.n	8001380 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001354:	2201      	movs	r2, #1
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	08db      	lsrs	r3, r3, #3
 800136a:	f003 0201 	and.w	r2, r3, #1
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b03      	cmp	r3, #3
 800138a:	d017      	beq.n	80013bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d123      	bne.n	8001410 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	6939      	ldr	r1, [r7, #16]
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80ac 	beq.w	80015aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	4b5f      	ldr	r3, [pc, #380]	; (80015d0 <HAL_GPIO_Init+0x330>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	4a5e      	ldr	r2, [pc, #376]	; (80015d0 <HAL_GPIO_Init+0x330>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6613      	str	r3, [r2, #96]	; 0x60
 800145e:	4b5c      	ldr	r3, [pc, #368]	; (80015d0 <HAL_GPIO_Init+0x330>)
 8001460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800146a:	4a5a      	ldr	r2, [pc, #360]	; (80015d4 <HAL_GPIO_Init+0x334>)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001494:	d025      	beq.n	80014e2 <HAL_GPIO_Init+0x242>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4f      	ldr	r2, [pc, #316]	; (80015d8 <HAL_GPIO_Init+0x338>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d01f      	beq.n	80014de <HAL_GPIO_Init+0x23e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4e      	ldr	r2, [pc, #312]	; (80015dc <HAL_GPIO_Init+0x33c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d019      	beq.n	80014da <HAL_GPIO_Init+0x23a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4d      	ldr	r2, [pc, #308]	; (80015e0 <HAL_GPIO_Init+0x340>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0x236>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4c      	ldr	r2, [pc, #304]	; (80015e4 <HAL_GPIO_Init+0x344>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00d      	beq.n	80014d2 <HAL_GPIO_Init+0x232>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4b      	ldr	r2, [pc, #300]	; (80015e8 <HAL_GPIO_Init+0x348>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d007      	beq.n	80014ce <HAL_GPIO_Init+0x22e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4a      	ldr	r2, [pc, #296]	; (80015ec <HAL_GPIO_Init+0x34c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d101      	bne.n	80014ca <HAL_GPIO_Init+0x22a>
 80014c6:	2306      	movs	r3, #6
 80014c8:	e00c      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014ca:	2307      	movs	r3, #7
 80014cc:	e00a      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014ce:	2305      	movs	r3, #5
 80014d0:	e008      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014d2:	2304      	movs	r3, #4
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014d6:	2303      	movs	r3, #3
 80014d8:	e004      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014da:	2302      	movs	r3, #2
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014e2:	2300      	movs	r3, #0
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	f002 0203 	and.w	r2, r2, #3
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	4093      	lsls	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014f4:	4937      	ldr	r1, [pc, #220]	; (80015d4 <HAL_GPIO_Init+0x334>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <HAL_GPIO_Init+0x350>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001526:	4a32      	ldr	r2, [pc, #200]	; (80015f0 <HAL_GPIO_Init+0x350>)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800152c:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <HAL_GPIO_Init+0x350>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	43db      	mvns	r3, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001550:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <HAL_GPIO_Init+0x350>)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_GPIO_Init+0x350>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800157a:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_GPIO_Init+0x350>)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_GPIO_Init+0x350>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <HAL_GPIO_Init+0x350>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f47f ae78 	bne.w	80012b0 <HAL_GPIO_Init+0x10>
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	371c      	adds	r7, #28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000
 80015d8:	48000400 	.word	0x48000400
 80015dc:	48000800 	.word	0x48000800
 80015e0:	48000c00 	.word	0x48000c00
 80015e4:	48001000 	.word	0x48001000
 80015e8:	48001400 	.word	0x48001400
 80015ec:	48001800 	.word	0x48001800
 80015f0:	40010400 	.word	0x40010400

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001610:	e002      	b.n	8001618 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <HAL_PWREx_GetVoltageRange+0x18>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40007000 	.word	0x40007000

08001640 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800164e:	d130      	bne.n	80016b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800165c:	d038      	beq.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001666:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2232      	movs	r2, #50	; 0x32
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	0c9b      	lsrs	r3, r3, #18
 8001680:	3301      	adds	r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001684:	e002      	b.n	800168c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3b01      	subs	r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001698:	d102      	bne.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f2      	bne.n	8001686 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ac:	d110      	bne.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e00f      	b.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016be:	d007      	beq.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40007000 	.word	0x40007000
 80016e4:	20000000 	.word	0x20000000
 80016e8:	431bde83 	.word	0x431bde83

080016ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e3ca      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016fe:	4b97      	ldr	r3, [pc, #604]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001708:	4b94      	ldr	r3, [pc, #592]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 80e4 	beq.w	80018e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <HAL_RCC_OscConfig+0x4a>
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b0c      	cmp	r3, #12
 800172a:	f040 808b 	bne.w	8001844 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2b01      	cmp	r3, #1
 8001732:	f040 8087 	bne.w	8001844 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001736:	4b89      	ldr	r3, [pc, #548]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d005      	beq.n	800174e <HAL_RCC_OscConfig+0x62>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e3a2      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1a      	ldr	r2, [r3, #32]
 8001752:	4b82      	ldr	r3, [pc, #520]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d004      	beq.n	8001768 <HAL_RCC_OscConfig+0x7c>
 800175e:	4b7f      	ldr	r3, [pc, #508]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001766:	e005      	b.n	8001774 <HAL_RCC_OscConfig+0x88>
 8001768:	4b7c      	ldr	r3, [pc, #496]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001774:	4293      	cmp	r3, r2
 8001776:	d223      	bcs.n	80017c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fd55 	bl	800222c <RCC_SetFlashLatencyFromMSIRange>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e383      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800178c:	4b73      	ldr	r3, [pc, #460]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a72      	ldr	r2, [pc, #456]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b70      	ldr	r3, [pc, #448]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	496d      	ldr	r1, [pc, #436]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017aa:	4b6c      	ldr	r3, [pc, #432]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	4968      	ldr	r1, [pc, #416]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
 80017be:	e025      	b.n	800180c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c0:	4b66      	ldr	r3, [pc, #408]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a65      	ldr	r2, [pc, #404]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017c6:	f043 0308 	orr.w	r3, r3, #8
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b63      	ldr	r3, [pc, #396]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4960      	ldr	r1, [pc, #384]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017de:	4b5f      	ldr	r3, [pc, #380]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	495b      	ldr	r1, [pc, #364]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d109      	bne.n	800180c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fd15 	bl	800222c <RCC_SetFlashLatencyFromMSIRange>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e343      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800180c:	f000 fc4a 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8001810:	4602      	mov	r2, r0
 8001812:	4b52      	ldr	r3, [pc, #328]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	4950      	ldr	r1, [pc, #320]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800181e:	5ccb      	ldrb	r3, [r1, r3]
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
 8001828:	4a4e      	ldr	r2, [pc, #312]	; (8001964 <HAL_RCC_OscConfig+0x278>)
 800182a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800182c:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <HAL_RCC_OscConfig+0x27c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff f9d1 	bl	8000bd8 <HAL_InitTick>
 8001836:	4603      	mov	r3, r0
 8001838:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d052      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	e327      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d032      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800184c:	4b43      	ldr	r3, [pc, #268]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a42      	ldr	r2, [pc, #264]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001858:	f7ff fa0e 	bl	8000c78 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001860:	f7ff fa0a 	bl	8000c78 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e310      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001872:	4b3a      	ldr	r3, [pc, #232]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a36      	ldr	r2, [pc, #216]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4931      	ldr	r1, [pc, #196]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800189c:	4b2f      	ldr	r3, [pc, #188]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	492c      	ldr	r1, [pc, #176]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
 80018b0:	e01a      	b.n	80018e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a29      	ldr	r2, [pc, #164]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018be:	f7ff f9db 	bl	8000c78 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c6:	f7ff f9d7 	bl	8000c78 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e2dd      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x1da>
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d074      	beq.n	80019de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d005      	beq.n	8001906 <HAL_RCC_OscConfig+0x21a>
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b0c      	cmp	r3, #12
 80018fe:	d10e      	bne.n	800191e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d10b      	bne.n	800191e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d064      	beq.n	80019dc <HAL_RCC_OscConfig+0x2f0>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d160      	bne.n	80019dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e2ba      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x24a>
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800192e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	e026      	b.n	8001984 <HAL_RCC_OscConfig+0x298>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800193e:	d115      	bne.n	800196c <HAL_RCC_OscConfig+0x280>
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001946:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a02      	ldr	r2, [pc, #8]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	e014      	b.n	8001984 <HAL_RCC_OscConfig+0x298>
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	08004578 	.word	0x08004578
 8001964:	20000000 	.word	0x20000000
 8001968:	20000004 	.word	0x20000004
 800196c:	4ba0      	ldr	r3, [pc, #640]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a9f      	ldr	r2, [pc, #636]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b9d      	ldr	r3, [pc, #628]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a9c      	ldr	r2, [pc, #624]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 800197e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f974 	bl	8000c78 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff f970 	bl	8000c78 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e276      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a6:	4b92      	ldr	r3, [pc, #584]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x2a8>
 80019b2:	e014      	b.n	80019de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff f960 	bl	8000c78 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff f95c 	bl	8000c78 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e262      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ce:	4b88      	ldr	r3, [pc, #544]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x2d0>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d060      	beq.n	8001aac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_OscConfig+0x310>
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	d119      	bne.n	8001a2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d116      	bne.n	8001a2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019fc:	4b7c      	ldr	r3, [pc, #496]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_OscConfig+0x328>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e23f      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	4973      	ldr	r1, [pc, #460]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a28:	e040      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d023      	beq.n	8001a7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a32:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6e      	ldr	r2, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f91b 	bl	8000c78 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff f917 	bl	8000c78 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e21d      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a58:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b62      	ldr	r3, [pc, #392]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	061b      	lsls	r3, r3, #24
 8001a72:	495f      	ldr	r1, [pc, #380]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
 8001a78:	e018      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a5c      	ldr	r2, [pc, #368]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff f8f7 	bl	8000c78 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7ff f8f3 	bl	8000c78 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e1f9      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa0:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d03c      	beq.n	8001b32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01c      	beq.n	8001afa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac6:	4a4a      	ldr	r2, [pc, #296]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f8d2 	bl	8000c78 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff f8ce 	bl	8000c78 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e1d4      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0ef      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x3ec>
 8001af8:	e01b      	b.n	8001b32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b00:	4a3b      	ldr	r2, [pc, #236]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f8b5 	bl	8000c78 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b12:	f7ff f8b1 	bl	8000c78 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1b7      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1ef      	bne.n	8001b12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80a6 	beq.w	8001c8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10d      	bne.n	8001b6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d118      	bne.n	8001baa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b84:	f7ff f878 	bl	8000c78 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8c:	f7ff f874 	bl	8000c78 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e17a      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4d8>
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc2:	e029      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d115      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x50c>
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bec:	e014      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	4b9c      	ldr	r3, [pc, #624]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfe:	4a9b      	ldr	r2, [pc, #620]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c08:	4b98      	ldr	r3, [pc, #608]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0e:	4a97      	ldr	r2, [pc, #604]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c10:	f023 0304 	bic.w	r3, r3, #4
 8001c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d016      	beq.n	8001c4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f82a 	bl	8000c78 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7ff f826 	bl	8000c78 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e12a      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c3e:	4b8b      	ldr	r3, [pc, #556]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0ed      	beq.n	8001c28 <HAL_RCC_OscConfig+0x53c>
 8001c4c:	e015      	b.n	8001c7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f813 	bl	8000c78 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7ff f80f 	bl	8000c78 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e113      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c6c:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ed      	bne.n	8001c56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c7a:	7ffb      	ldrb	r3, [r7, #31]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c80:	4b7a      	ldr	r3, [pc, #488]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	4a79      	ldr	r2, [pc, #484]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80fe 	beq.w	8001e92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	f040 80d0 	bne.w	8001e40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ca0:	4b72      	ldr	r3, [pc, #456]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0203 	and.w	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d130      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d127      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d11f      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ce0:	2a07      	cmp	r2, #7
 8001ce2:	bf14      	ite	ne
 8001ce4:	2201      	movne	r2, #1
 8001ce6:	2200      	moveq	r2, #0
 8001ce8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d113      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d109      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	085b      	lsrs	r3, r3, #1
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d06e      	beq.n	8001df4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b0c      	cmp	r3, #12
 8001d1a:	d069      	beq.n	8001df0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d1c:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d28:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0ad      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d38:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a4b      	ldr	r2, [pc, #300]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d44:	f7fe ff98 	bl	8000c78 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7fe ff94 	bl	8000c78 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e09a      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5e:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6a:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	4b40      	ldr	r3, [pc, #256]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d7a:	3a01      	subs	r2, #1
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	4311      	orrs	r1, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d84:	0212      	lsls	r2, r2, #8
 8001d86:	4311      	orrs	r1, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d8c:	0852      	lsrs	r2, r2, #1
 8001d8e:	3a01      	subs	r2, #1
 8001d90:	0552      	lsls	r2, r2, #21
 8001d92:	4311      	orrs	r1, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d98:	0852      	lsrs	r2, r2, #1
 8001d9a:	3a01      	subs	r2, #1
 8001d9c:	0652      	lsls	r2, r2, #25
 8001d9e:	4311      	orrs	r1, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001da4:	0912      	lsrs	r2, r2, #4
 8001da6:	0452      	lsls	r2, r2, #17
 8001da8:	430a      	orrs	r2, r1
 8001daa:	4930      	ldr	r1, [pc, #192]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a2d      	ldr	r2, [pc, #180]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4a2a      	ldr	r2, [pc, #168]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dc8:	f7fe ff56 	bl	8000c78 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7fe ff52 	bl	8000c78 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e058      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dee:	e050      	b.n	8001e92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e04f      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d148      	bne.n	8001e92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e00:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4a16      	ldr	r2, [pc, #88]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e18:	f7fe ff2e 	bl	8000c78 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7fe ff2a 	bl	8000c78 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e030      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x734>
 8001e3e:	e028      	b.n	8001e92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d023      	beq.n	8001e8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7fe ff11 	bl	8000c78 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e58:	e00c      	b.n	8001e74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7fe ff0d 	bl	8000c78 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d905      	bls.n	8001e74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e013      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_OscConfig+0x7b0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ec      	bne.n	8001e5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_RCC_OscConfig+0x7b0>)
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	4905      	ldr	r1, [pc, #20]	; (8001e9c <HAL_RCC_OscConfig+0x7b0>)
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCC_OscConfig+0x7b4>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60cb      	str	r3, [r1, #12]
 8001e8c:	e001      	b.n	8001e92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	feeefffc 	.word	0xfeeefffc

08001ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0e7      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b75      	ldr	r3, [pc, #468]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b72      	ldr	r3, [pc, #456]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4970      	ldr	r1, [pc, #448]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b6e      	ldr	r3, [pc, #440]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0cf      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d010      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	4b66      	ldr	r3, [pc, #408]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d908      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4960      	ldr	r1, [pc, #384]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d04c      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2a:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d121      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0a6      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f42:	4b54      	ldr	r3, [pc, #336]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d115      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e09a      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f5a:	4b4e      	ldr	r3, [pc, #312]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e08e      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6a:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e086      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f7a:	4b46      	ldr	r3, [pc, #280]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4943      	ldr	r1, [pc, #268]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8c:	f7fe fe74 	bl	8000c78 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7fe fe70 	bl	8000c78 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e06e      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 020c 	and.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1eb      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d010      	beq.n	8001fea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d208      	bcs.n	8001fea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	492b      	ldr	r1, [pc, #172]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fea:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d210      	bcs.n	800201a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff8:	4b25      	ldr	r3, [pc, #148]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 0207 	bic.w	r2, r3, #7
 8002000:	4923      	ldr	r1, [pc, #140]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e036      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	4918      	ldr	r1, [pc, #96]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4910      	ldr	r1, [pc, #64]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002058:	f000 f824 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	490b      	ldr	r1, [pc, #44]	; (8002098 <HAL_RCC_ClockConfig+0x1f4>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1f8>)
 8002076:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1fc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fdab 	bl	8000bd8 <HAL_InitTick>
 8002082:	4603      	mov	r3, r0
 8002084:	72fb      	strb	r3, [r7, #11]

  return status;
 8002086:	7afb      	ldrb	r3, [r7, #11]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40022000 	.word	0x40022000
 8002094:	40021000 	.word	0x40021000
 8002098:	08004578 	.word	0x08004578
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000004 	.word	0x20000004

080020a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	; 0x24
 80020a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b2:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020bc:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x34>
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d121      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d11e      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020d8:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	e005      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002100:	4a2b      	ldr	r2, [pc, #172]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10d      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002114:	e00a      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d102      	bne.n	8002122 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800211e:	61bb      	str	r3, [r7, #24]
 8002120:	e004      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d101      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800212a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	2b0c      	cmp	r3, #12
 8002130:	d134      	bne.n	800219c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d003      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0xa6>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d003      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0xac>
 8002148:	e005      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800214c:	617b      	str	r3, [r7, #20]
      break;
 800214e:	e005      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002152:	617b      	str	r3, [r7, #20]
      break;
 8002154:	e002      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	617b      	str	r3, [r7, #20]
      break;
 800215a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	3301      	adds	r3, #1
 8002168:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	fb03 f202 	mul.w	r2, r3, r2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	0e5b      	lsrs	r3, r3, #25
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	3301      	adds	r3, #1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800219c:	69bb      	ldr	r3, [r7, #24]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08004590 	.word	0x08004590
 80021b4:	00f42400 	.word	0x00f42400
 80021b8:	007a1200 	.word	0x007a1200

080021bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000000 	.word	0x20000000

080021d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021d8:	f7ff fff0 	bl	80021bc <HAL_RCC_GetHCLKFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	4904      	ldr	r1, [pc, #16]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08004588 	.word	0x08004588

08002200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002204:	f7ff ffda 	bl	80021bc <HAL_RCC_GetHCLKFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x24>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	0adb      	lsrs	r3, r3, #11
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4904      	ldr	r1, [pc, #16]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	08004588 	.word	0x08004588

0800222c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002238:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002244:	f7ff f9ee 	bl	8001624 <HAL_PWREx_GetVoltageRange>
 8002248:	6178      	str	r0, [r7, #20]
 800224a:	e014      	b.n	8002276 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	4a24      	ldr	r2, [pc, #144]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	6593      	str	r3, [r2, #88]	; 0x58
 8002258:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002264:	f7ff f9de 	bl	8001624 <HAL_PWREx_GetVoltageRange>
 8002268:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002274:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800227c:	d10b      	bne.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b80      	cmp	r3, #128	; 0x80
 8002282:	d919      	bls.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2ba0      	cmp	r3, #160	; 0xa0
 8002288:	d902      	bls.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800228a:	2302      	movs	r3, #2
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	e013      	b.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002290:	2301      	movs	r3, #1
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	e010      	b.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d902      	bls.n	80022a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800229c:	2303      	movs	r3, #3
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	e00a      	b.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b80      	cmp	r3, #128	; 0x80
 80022a6:	d102      	bne.n	80022ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022a8:	2302      	movs	r3, #2
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	e004      	b.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b70      	cmp	r3, #112	; 0x70
 80022b2:	d101      	bne.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022b4:	2301      	movs	r3, #1
 80022b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 0207 	bic.w	r2, r3, #7
 80022c0:	4909      	ldr	r1, [pc, #36]	; (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40022000 	.word	0x40022000

080022ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022f4:	2300      	movs	r3, #0
 80022f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022f8:	2300      	movs	r3, #0
 80022fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002304:	2b00      	cmp	r3, #0
 8002306:	d041      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800230c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002310:	d02a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002312:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002316:	d824      	bhi.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002318:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800231c:	d008      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800231e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002322:	d81e      	bhi.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232c:	d010      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800232e:	e018      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002330:	4b86      	ldr	r3, [pc, #536]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a85      	ldr	r2, [pc, #532]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800233c:	e015      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fabb 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 800234a:	4603      	mov	r3, r0
 800234c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800234e:	e00c      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3320      	adds	r3, #32
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fba6 	bl	8002aa8 <RCCEx_PLLSAI2_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002360:	e003      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	74fb      	strb	r3, [r7, #19]
      break;
 8002366:	e000      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10b      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002370:	4b76      	ldr	r3, [pc, #472]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800237e:	4973      	ldr	r1, [pc, #460]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002386:	e001      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d041      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800239c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023a0:	d02a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023a6:	d824      	bhi.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023ac:	d008      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023b2:	d81e      	bhi.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023bc:	d010      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023be:	e018      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023c0:	4b62      	ldr	r3, [pc, #392]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a61      	ldr	r2, [pc, #388]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023cc:	e015      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fa73 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 80023da:	4603      	mov	r3, r0
 80023dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023de:	e00c      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3320      	adds	r3, #32
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fb5e 	bl	8002aa8 <RCCEx_PLLSAI2_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023f0:	e003      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	74fb      	strb	r3, [r7, #19]
      break;
 80023f6:	e000      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002400:	4b52      	ldr	r3, [pc, #328]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800240e:	494f      	ldr	r1, [pc, #316]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002416:	e001      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80a0 	beq.w	800256a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800243e:	2300      	movs	r3, #0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00d      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4b41      	ldr	r3, [pc, #260]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	4a40      	ldr	r2, [pc, #256]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244e:	6593      	str	r3, [r2, #88]	; 0x58
 8002450:	4b3e      	ldr	r3, [pc, #248]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245c:	2301      	movs	r3, #1
 800245e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002460:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a3a      	ldr	r2, [pc, #232]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800246c:	f7fe fc04 	bl	8000c78 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002472:	e009      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002474:	f7fe fc00 	bl	8000c78 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d902      	bls.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	74fb      	strb	r3, [r7, #19]
        break;
 8002486:	e005      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ef      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d15c      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01f      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d019      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ca:	4a20      	ldr	r2, [pc, #128]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	4a1c      	ldr	r2, [pc, #112]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d016      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe fbbf 	bl	8000c78 <HAL_GetTick>
 80024fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024fc:	e00b      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fbbb 	bl	8000c78 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d902      	bls.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	74fb      	strb	r3, [r7, #19]
            break;
 8002514:	e006      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002516:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ec      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800253a:	4904      	ldr	r1, [pc, #16]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002542:	e009      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	74bb      	strb	r3, [r7, #18]
 8002548:	e006      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002558:	7c7b      	ldrb	r3, [r7, #17]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d105      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255e:	4b9e      	ldr	r3, [pc, #632]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	4a9d      	ldr	r2, [pc, #628]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002568:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002576:	4b98      	ldr	r3, [pc, #608]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f023 0203 	bic.w	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	4994      	ldr	r1, [pc, #592]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002598:	4b8f      	ldr	r3, [pc, #572]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 020c 	bic.w	r2, r3, #12
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	498c      	ldr	r1, [pc, #560]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ba:	4b87      	ldr	r3, [pc, #540]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	4983      	ldr	r1, [pc, #524]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025dc:	4b7e      	ldr	r3, [pc, #504]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	497b      	ldr	r1, [pc, #492]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025fe:	4b76      	ldr	r3, [pc, #472]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260c:	4972      	ldr	r1, [pc, #456]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002620:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	496a      	ldr	r1, [pc, #424]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002642:	4b65      	ldr	r3, [pc, #404]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002648:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	4961      	ldr	r1, [pc, #388]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002664:	4b5c      	ldr	r3, [pc, #368]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002672:	4959      	ldr	r1, [pc, #356]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002686:	4b54      	ldr	r3, [pc, #336]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002694:	4950      	ldr	r1, [pc, #320]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026a8:	4b4b      	ldr	r3, [pc, #300]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	4948      	ldr	r1, [pc, #288]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026ca:	4b43      	ldr	r3, [pc, #268]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	493f      	ldr	r1, [pc, #252]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d028      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ec:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026fa:	4937      	ldr	r1, [pc, #220]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800270a:	d106      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800270c:	4b32      	ldr	r3, [pc, #200]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a31      	ldr	r2, [pc, #196]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002716:	60d3      	str	r3, [r2, #12]
 8002718:	e011      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002722:	d10c      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3304      	adds	r3, #4
 8002728:	2101      	movs	r1, #1
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f8c8 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d028      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800274a:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002750:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	491f      	ldr	r1, [pc, #124]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002768:	d106      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002774:	60d3      	str	r3, [r2, #12]
 8002776:	e011      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002780:	d10c      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	2101      	movs	r1, #1
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f899 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 800278e:	4603      	mov	r3, r0
 8002790:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002792:	7cfb      	ldrb	r3, [r7, #19]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002798:	7cfb      	ldrb	r3, [r7, #19]
 800279a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d02b      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b6:	4908      	ldr	r1, [pc, #32]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027c6:	d109      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4a02      	ldr	r2, [pc, #8]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d2:	60d3      	str	r3, [r2, #12]
 80027d4:	e014      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027e4:	d10c      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2101      	movs	r1, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 f867 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f6:	7cfb      	ldrb	r3, [r7, #19]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d02f      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800281a:	4928      	ldr	r1, [pc, #160]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800282a:	d10d      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3304      	adds	r3, #4
 8002830:	2102      	movs	r1, #2
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f844 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d014      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	74bb      	strb	r3, [r7, #18]
 8002846:	e011      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800284c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002850:	d10c      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3320      	adds	r3, #32
 8002856:	2102      	movs	r1, #2
 8002858:	4618      	mov	r0, r3
 800285a:	f000 f925 	bl	8002aa8 <RCCEx_PLLSAI2_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002878:	4b10      	ldr	r3, [pc, #64]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002886:	490d      	ldr	r1, [pc, #52]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028aa:	4904      	ldr	r1, [pc, #16]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000

080028c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028ce:	4b75      	ldr	r3, [pc, #468]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d018      	beq.n	800290c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028da:	4b72      	ldr	r3, [pc, #456]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 0203 	and.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d10d      	bne.n	8002906 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
       ||
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028f2:	4b6c      	ldr	r3, [pc, #432]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
       ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d047      	beq.n	8002996 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
 800290a:	e044      	b.n	8002996 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d018      	beq.n	8002946 <RCCEx_PLLSAI1_Config+0x86>
 8002914:	2b03      	cmp	r3, #3
 8002916:	d825      	bhi.n	8002964 <RCCEx_PLLSAI1_Config+0xa4>
 8002918:	2b01      	cmp	r3, #1
 800291a:	d002      	beq.n	8002922 <RCCEx_PLLSAI1_Config+0x62>
 800291c:	2b02      	cmp	r3, #2
 800291e:	d009      	beq.n	8002934 <RCCEx_PLLSAI1_Config+0x74>
 8002920:	e020      	b.n	8002964 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002922:	4b60      	ldr	r3, [pc, #384]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d11d      	bne.n	800296a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002932:	e01a      	b.n	800296a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002934:	4b5b      	ldr	r3, [pc, #364]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d116      	bne.n	800296e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002944:	e013      	b.n	800296e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002946:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10f      	bne.n	8002972 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002952:	4b54      	ldr	r3, [pc, #336]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002962:	e006      	b.n	8002972 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      break;
 8002968:	e004      	b.n	8002974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800296a:	bf00      	nop
 800296c:	e002      	b.n	8002974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002972:	bf00      	nop
    }

    if(status == HAL_OK)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10d      	bne.n	8002996 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800297a:	4b4a      	ldr	r3, [pc, #296]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6819      	ldr	r1, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	430b      	orrs	r3, r1
 8002990:	4944      	ldr	r1, [pc, #272]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d17d      	bne.n	8002a98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800299c:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a40      	ldr	r2, [pc, #256]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a8:	f7fe f966 	bl	8000c78 <HAL_GetTick>
 80029ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029ae:	e009      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029b0:	f7fe f962 	bl	8000c78 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d902      	bls.n	80029c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	73fb      	strb	r3, [r7, #15]
        break;
 80029c2:	e005      	b.n	80029d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029c4:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ef      	bne.n	80029b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d160      	bne.n	8002a98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d111      	bne.n	8002a00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029dc:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6892      	ldr	r2, [r2, #8]
 80029ec:	0211      	lsls	r1, r2, #8
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68d2      	ldr	r2, [r2, #12]
 80029f2:	0912      	lsrs	r2, r2, #4
 80029f4:	0452      	lsls	r2, r2, #17
 80029f6:	430a      	orrs	r2, r1
 80029f8:	492a      	ldr	r1, [pc, #168]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	610b      	str	r3, [r1, #16]
 80029fe:	e027      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d112      	bne.n	8002a2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a06:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6892      	ldr	r2, [r2, #8]
 8002a16:	0211      	lsls	r1, r2, #8
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6912      	ldr	r2, [r2, #16]
 8002a1c:	0852      	lsrs	r2, r2, #1
 8002a1e:	3a01      	subs	r2, #1
 8002a20:	0552      	lsls	r2, r2, #21
 8002a22:	430a      	orrs	r2, r1
 8002a24:	491f      	ldr	r1, [pc, #124]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	610b      	str	r3, [r1, #16]
 8002a2a:	e011      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6892      	ldr	r2, [r2, #8]
 8002a3c:	0211      	lsls	r1, r2, #8
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6952      	ldr	r2, [r2, #20]
 8002a42:	0852      	lsrs	r2, r2, #1
 8002a44:	3a01      	subs	r2, #1
 8002a46:	0652      	lsls	r2, r2, #25
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	4916      	ldr	r1, [pc, #88]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a50:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7fe f90c 	bl	8000c78 <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a62:	e009      	b.n	8002a78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a64:	f7fe f908 	bl	8000c78 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d902      	bls.n	8002a78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	73fb      	strb	r3, [r7, #15]
          break;
 8002a76:	e005      	b.n	8002a84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ef      	beq.n	8002a64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	4904      	ldr	r1, [pc, #16]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000

08002aa8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ab6:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d018      	beq.n	8002af4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ac2:	4b67      	ldr	r3, [pc, #412]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0203 	and.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d10d      	bne.n	8002aee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ada:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
       ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d047      	beq.n	8002b7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	e044      	b.n	8002b7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d018      	beq.n	8002b2e <RCCEx_PLLSAI2_Config+0x86>
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d825      	bhi.n	8002b4c <RCCEx_PLLSAI2_Config+0xa4>
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d002      	beq.n	8002b0a <RCCEx_PLLSAI2_Config+0x62>
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d009      	beq.n	8002b1c <RCCEx_PLLSAI2_Config+0x74>
 8002b08:	e020      	b.n	8002b4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b0a:	4b55      	ldr	r3, [pc, #340]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d11d      	bne.n	8002b52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1a:	e01a      	b.n	8002b52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b1c:	4b50      	ldr	r3, [pc, #320]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d116      	bne.n	8002b56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2c:	e013      	b.n	8002b56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b2e:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10f      	bne.n	8002b5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b3a:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b4a:	e006      	b.n	8002b5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b50:	e004      	b.n	8002b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b52:	bf00      	nop
 8002b54:	e002      	b.n	8002b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b56:	bf00      	nop
 8002b58:	e000      	b.n	8002b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10d      	bne.n	8002b7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b62:	4b3f      	ldr	r3, [pc, #252]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6819      	ldr	r1, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	430b      	orrs	r3, r1
 8002b78:	4939      	ldr	r1, [pc, #228]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d167      	bne.n	8002c54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b84:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a35      	ldr	r2, [pc, #212]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b90:	f7fe f872 	bl	8000c78 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b96:	e009      	b.n	8002bac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b98:	f7fe f86e 	bl	8000c78 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d902      	bls.n	8002bac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	73fb      	strb	r3, [r7, #15]
        break;
 8002baa:	e005      	b.n	8002bb8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bac:	4b2c      	ldr	r3, [pc, #176]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ef      	bne.n	8002b98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d14a      	bne.n	8002c54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d111      	bne.n	8002be8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bc4:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6892      	ldr	r2, [r2, #8]
 8002bd4:	0211      	lsls	r1, r2, #8
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68d2      	ldr	r2, [r2, #12]
 8002bda:	0912      	lsrs	r2, r2, #4
 8002bdc:	0452      	lsls	r2, r2, #17
 8002bde:	430a      	orrs	r2, r1
 8002be0:	491f      	ldr	r1, [pc, #124]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	614b      	str	r3, [r1, #20]
 8002be6:	e011      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6892      	ldr	r2, [r2, #8]
 8002bf8:	0211      	lsls	r1, r2, #8
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6912      	ldr	r2, [r2, #16]
 8002bfe:	0852      	lsrs	r2, r2, #1
 8002c00:	3a01      	subs	r2, #1
 8002c02:	0652      	lsls	r2, r2, #25
 8002c04:	430a      	orrs	r2, r1
 8002c06:	4916      	ldr	r1, [pc, #88]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c18:	f7fe f82e 	bl	8000c78 <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c1e:	e009      	b.n	8002c34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c20:	f7fe f82a 	bl	8000c78 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d902      	bls.n	8002c34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	73fb      	strb	r3, [r7, #15]
          break;
 8002c32:	e005      	b.n	8002c40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c34:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ef      	beq.n	8002c20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	4904      	ldr	r1, [pc, #16]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000

08002c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e040      	b.n	8002cf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fd fe3c 	bl	8000904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2224      	movs	r2, #36	; 0x24
 8002c90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f82c 	bl	8002d00 <UART_SetConfig>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e022      	b.n	8002cf8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fad8 	bl	8003270 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fb5f 	bl	80033b4 <UART_CheckIdleState>
 8002cf6:	4603      	mov	r3, r0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d04:	b08a      	sub	sp, #40	; 0x28
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4ba4      	ldr	r3, [pc, #656]	; (8002fc0 <UART_SetConfig+0x2c0>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a99      	ldr	r2, [pc, #612]	; (8002fc4 <UART_SetConfig+0x2c4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a90      	ldr	r2, [pc, #576]	; (8002fc8 <UART_SetConfig+0x2c8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d126      	bne.n	8002dd8 <UART_SetConfig+0xd8>
 8002d8a:	4b90      	ldr	r3, [pc, #576]	; (8002fcc <UART_SetConfig+0x2cc>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d81b      	bhi.n	8002dd0 <UART_SetConfig+0xd0>
 8002d98:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <UART_SetConfig+0xa0>)
 8002d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9e:	bf00      	nop
 8002da0:	08002db1 	.word	0x08002db1
 8002da4:	08002dc1 	.word	0x08002dc1
 8002da8:	08002db9 	.word	0x08002db9
 8002dac:	08002dc9 	.word	0x08002dc9
 8002db0:	2301      	movs	r3, #1
 8002db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db6:	e116      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002db8:	2302      	movs	r3, #2
 8002dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dbe:	e112      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc6:	e10e      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002dc8:	2308      	movs	r3, #8
 8002dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dce:	e10a      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd6:	e106      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a7c      	ldr	r2, [pc, #496]	; (8002fd0 <UART_SetConfig+0x2d0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d138      	bne.n	8002e54 <UART_SetConfig+0x154>
 8002de2:	4b7a      	ldr	r3, [pc, #488]	; (8002fcc <UART_SetConfig+0x2cc>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	d82d      	bhi.n	8002e4c <UART_SetConfig+0x14c>
 8002df0:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <UART_SetConfig+0xf8>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08002e2d 	.word	0x08002e2d
 8002dfc:	08002e4d 	.word	0x08002e4d
 8002e00:	08002e4d 	.word	0x08002e4d
 8002e04:	08002e4d 	.word	0x08002e4d
 8002e08:	08002e3d 	.word	0x08002e3d
 8002e0c:	08002e4d 	.word	0x08002e4d
 8002e10:	08002e4d 	.word	0x08002e4d
 8002e14:	08002e4d 	.word	0x08002e4d
 8002e18:	08002e35 	.word	0x08002e35
 8002e1c:	08002e4d 	.word	0x08002e4d
 8002e20:	08002e4d 	.word	0x08002e4d
 8002e24:	08002e4d 	.word	0x08002e4d
 8002e28:	08002e45 	.word	0x08002e45
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e32:	e0d8      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002e34:	2302      	movs	r3, #2
 8002e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e3a:	e0d4      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e42:	e0d0      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002e44:	2308      	movs	r3, #8
 8002e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e4a:	e0cc      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e52:	e0c8      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5e      	ldr	r2, [pc, #376]	; (8002fd4 <UART_SetConfig+0x2d4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d125      	bne.n	8002eaa <UART_SetConfig+0x1aa>
 8002e5e:	4b5b      	ldr	r3, [pc, #364]	; (8002fcc <UART_SetConfig+0x2cc>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e68:	2b30      	cmp	r3, #48	; 0x30
 8002e6a:	d016      	beq.n	8002e9a <UART_SetConfig+0x19a>
 8002e6c:	2b30      	cmp	r3, #48	; 0x30
 8002e6e:	d818      	bhi.n	8002ea2 <UART_SetConfig+0x1a2>
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d00a      	beq.n	8002e8a <UART_SetConfig+0x18a>
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d814      	bhi.n	8002ea2 <UART_SetConfig+0x1a2>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <UART_SetConfig+0x182>
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	d008      	beq.n	8002e92 <UART_SetConfig+0x192>
 8002e80:	e00f      	b.n	8002ea2 <UART_SetConfig+0x1a2>
 8002e82:	2300      	movs	r3, #0
 8002e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e88:	e0ad      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e90:	e0a9      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002e92:	2304      	movs	r3, #4
 8002e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e98:	e0a5      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea0:	e0a1      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002ea2:	2310      	movs	r3, #16
 8002ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea8:	e09d      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a4a      	ldr	r2, [pc, #296]	; (8002fd8 <UART_SetConfig+0x2d8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d125      	bne.n	8002f00 <UART_SetConfig+0x200>
 8002eb4:	4b45      	ldr	r3, [pc, #276]	; (8002fcc <UART_SetConfig+0x2cc>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ebe:	2bc0      	cmp	r3, #192	; 0xc0
 8002ec0:	d016      	beq.n	8002ef0 <UART_SetConfig+0x1f0>
 8002ec2:	2bc0      	cmp	r3, #192	; 0xc0
 8002ec4:	d818      	bhi.n	8002ef8 <UART_SetConfig+0x1f8>
 8002ec6:	2b80      	cmp	r3, #128	; 0x80
 8002ec8:	d00a      	beq.n	8002ee0 <UART_SetConfig+0x1e0>
 8002eca:	2b80      	cmp	r3, #128	; 0x80
 8002ecc:	d814      	bhi.n	8002ef8 <UART_SetConfig+0x1f8>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <UART_SetConfig+0x1d8>
 8002ed2:	2b40      	cmp	r3, #64	; 0x40
 8002ed4:	d008      	beq.n	8002ee8 <UART_SetConfig+0x1e8>
 8002ed6:	e00f      	b.n	8002ef8 <UART_SetConfig+0x1f8>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ede:	e082      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ee6:	e07e      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eee:	e07a      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef6:	e076      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002efe:	e072      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a35      	ldr	r2, [pc, #212]	; (8002fdc <UART_SetConfig+0x2dc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d12a      	bne.n	8002f60 <UART_SetConfig+0x260>
 8002f0a:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <UART_SetConfig+0x2cc>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f18:	d01a      	beq.n	8002f50 <UART_SetConfig+0x250>
 8002f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f1e:	d81b      	bhi.n	8002f58 <UART_SetConfig+0x258>
 8002f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f24:	d00c      	beq.n	8002f40 <UART_SetConfig+0x240>
 8002f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2a:	d815      	bhi.n	8002f58 <UART_SetConfig+0x258>
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <UART_SetConfig+0x238>
 8002f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f34:	d008      	beq.n	8002f48 <UART_SetConfig+0x248>
 8002f36:	e00f      	b.n	8002f58 <UART_SetConfig+0x258>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f3e:	e052      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002f40:	2302      	movs	r3, #2
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f46:	e04e      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4e:	e04a      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002f50:	2308      	movs	r3, #8
 8002f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f56:	e046      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002f58:	2310      	movs	r3, #16
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5e:	e042      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <UART_SetConfig+0x2c4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d13a      	bne.n	8002fe0 <UART_SetConfig+0x2e0>
 8002f6a:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <UART_SetConfig+0x2cc>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f78:	d01a      	beq.n	8002fb0 <UART_SetConfig+0x2b0>
 8002f7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f7e:	d81b      	bhi.n	8002fb8 <UART_SetConfig+0x2b8>
 8002f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f84:	d00c      	beq.n	8002fa0 <UART_SetConfig+0x2a0>
 8002f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f8a:	d815      	bhi.n	8002fb8 <UART_SetConfig+0x2b8>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <UART_SetConfig+0x298>
 8002f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f94:	d008      	beq.n	8002fa8 <UART_SetConfig+0x2a8>
 8002f96:	e00f      	b.n	8002fb8 <UART_SetConfig+0x2b8>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9e:	e022      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa6:	e01e      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fae:	e01a      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb6:	e016      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fbe:	e012      	b.n	8002fe6 <UART_SetConfig+0x2e6>
 8002fc0:	efff69f3 	.word	0xefff69f3
 8002fc4:	40008000 	.word	0x40008000
 8002fc8:	40013800 	.word	0x40013800
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40004400 	.word	0x40004400
 8002fd4:	40004800 	.word	0x40004800
 8002fd8:	40004c00 	.word	0x40004c00
 8002fdc:	40005000 	.word	0x40005000
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a9f      	ldr	r2, [pc, #636]	; (8003268 <UART_SetConfig+0x568>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d17a      	bne.n	80030e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d824      	bhi.n	8003042 <UART_SetConfig+0x342>
 8002ff8:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <UART_SetConfig+0x300>)
 8002ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffe:	bf00      	nop
 8003000:	08003025 	.word	0x08003025
 8003004:	08003043 	.word	0x08003043
 8003008:	0800302d 	.word	0x0800302d
 800300c:	08003043 	.word	0x08003043
 8003010:	08003033 	.word	0x08003033
 8003014:	08003043 	.word	0x08003043
 8003018:	08003043 	.word	0x08003043
 800301c:	08003043 	.word	0x08003043
 8003020:	0800303b 	.word	0x0800303b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003024:	f7ff f8d6 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 8003028:	61f8      	str	r0, [r7, #28]
        break;
 800302a:	e010      	b.n	800304e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800302c:	4b8f      	ldr	r3, [pc, #572]	; (800326c <UART_SetConfig+0x56c>)
 800302e:	61fb      	str	r3, [r7, #28]
        break;
 8003030:	e00d      	b.n	800304e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003032:	f7ff f837 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8003036:	61f8      	str	r0, [r7, #28]
        break;
 8003038:	e009      	b.n	800304e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800303a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800303e:	61fb      	str	r3, [r7, #28]
        break;
 8003040:	e005      	b.n	800304e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800304c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80fb 	beq.w	800324c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	429a      	cmp	r2, r3
 8003064:	d305      	bcc.n	8003072 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	429a      	cmp	r2, r3
 8003070:	d903      	bls.n	800307a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003078:	e0e8      	b.n	800324c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	2200      	movs	r2, #0
 800307e:	461c      	mov	r4, r3
 8003080:	4615      	mov	r5, r2
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	022b      	lsls	r3, r5, #8
 800308c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003090:	0222      	lsls	r2, r4, #8
 8003092:	68f9      	ldr	r1, [r7, #12]
 8003094:	6849      	ldr	r1, [r1, #4]
 8003096:	0849      	lsrs	r1, r1, #1
 8003098:	2000      	movs	r0, #0
 800309a:	4688      	mov	r8, r1
 800309c:	4681      	mov	r9, r0
 800309e:	eb12 0a08 	adds.w	sl, r2, r8
 80030a2:	eb43 0b09 	adc.w	fp, r3, r9
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030b4:	4650      	mov	r0, sl
 80030b6:	4659      	mov	r1, fp
 80030b8:	f7fd f8da 	bl	8000270 <__aeabi_uldivmod>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4613      	mov	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ca:	d308      	bcc.n	80030de <UART_SetConfig+0x3de>
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030d2:	d204      	bcs.n	80030de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	60da      	str	r2, [r3, #12]
 80030dc:	e0b6      	b.n	800324c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030e4:	e0b2      	b.n	800324c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ee:	d15e      	bne.n	80031ae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80030f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d828      	bhi.n	800314a <UART_SetConfig+0x44a>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <UART_SetConfig+0x400>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003125 	.word	0x08003125
 8003104:	0800312d 	.word	0x0800312d
 8003108:	08003135 	.word	0x08003135
 800310c:	0800314b 	.word	0x0800314b
 8003110:	0800313b 	.word	0x0800313b
 8003114:	0800314b 	.word	0x0800314b
 8003118:	0800314b 	.word	0x0800314b
 800311c:	0800314b 	.word	0x0800314b
 8003120:	08003143 	.word	0x08003143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003124:	f7ff f856 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 8003128:	61f8      	str	r0, [r7, #28]
        break;
 800312a:	e014      	b.n	8003156 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800312c:	f7ff f868 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8003130:	61f8      	str	r0, [r7, #28]
        break;
 8003132:	e010      	b.n	8003156 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003134:	4b4d      	ldr	r3, [pc, #308]	; (800326c <UART_SetConfig+0x56c>)
 8003136:	61fb      	str	r3, [r7, #28]
        break;
 8003138:	e00d      	b.n	8003156 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800313a:	f7fe ffb3 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 800313e:	61f8      	str	r0, [r7, #28]
        break;
 8003140:	e009      	b.n	8003156 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003146:	61fb      	str	r3, [r7, #28]
        break;
 8003148:	e005      	b.n	8003156 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003154:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d077      	beq.n	800324c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	005a      	lsls	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	441a      	add	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b0f      	cmp	r3, #15
 8003176:	d916      	bls.n	80031a6 <UART_SetConfig+0x4a6>
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317e:	d212      	bcs.n	80031a6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	b29b      	uxth	r3, r3
 8003184:	f023 030f 	bic.w	r3, r3, #15
 8003188:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	b29b      	uxth	r3, r3
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	b29a      	uxth	r2, r3
 8003196:	8afb      	ldrh	r3, [r7, #22]
 8003198:	4313      	orrs	r3, r2
 800319a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	8afa      	ldrh	r2, [r7, #22]
 80031a2:	60da      	str	r2, [r3, #12]
 80031a4:	e052      	b.n	800324c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031ac:	e04e      	b.n	800324c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d827      	bhi.n	8003206 <UART_SetConfig+0x506>
 80031b6:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <UART_SetConfig+0x4bc>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	080031e1 	.word	0x080031e1
 80031c0:	080031e9 	.word	0x080031e9
 80031c4:	080031f1 	.word	0x080031f1
 80031c8:	08003207 	.word	0x08003207
 80031cc:	080031f7 	.word	0x080031f7
 80031d0:	08003207 	.word	0x08003207
 80031d4:	08003207 	.word	0x08003207
 80031d8:	08003207 	.word	0x08003207
 80031dc:	080031ff 	.word	0x080031ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e0:	f7fe fff8 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 80031e4:	61f8      	str	r0, [r7, #28]
        break;
 80031e6:	e014      	b.n	8003212 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031e8:	f7ff f80a 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80031ec:	61f8      	str	r0, [r7, #28]
        break;
 80031ee:	e010      	b.n	8003212 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031f0:	4b1e      	ldr	r3, [pc, #120]	; (800326c <UART_SetConfig+0x56c>)
 80031f2:	61fb      	str	r3, [r7, #28]
        break;
 80031f4:	e00d      	b.n	8003212 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031f6:	f7fe ff55 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 80031fa:	61f8      	str	r0, [r7, #28]
        break;
 80031fc:	e009      	b.n	8003212 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003202:	61fb      	str	r3, [r7, #28]
        break;
 8003204:	e005      	b.n	8003212 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003210:	bf00      	nop
    }

    if (pclk != 0U)
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d019      	beq.n	800324c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	085a      	lsrs	r2, r3, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	441a      	add	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b0f      	cmp	r3, #15
 8003230:	d909      	bls.n	8003246 <UART_SetConfig+0x546>
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003238:	d205      	bcs.n	8003246 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60da      	str	r2, [r3, #12]
 8003244:	e002      	b.n	800324c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003258:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800325c:	4618      	mov	r0, r3
 800325e:	3728      	adds	r7, #40	; 0x28
 8003260:	46bd      	mov	sp, r7
 8003262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003266:	bf00      	nop
 8003268:	40008000 	.word	0x40008000
 800326c:	00f42400 	.word	0x00f42400

08003270 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01a      	beq.n	8003386 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800336e:	d10a      	bne.n	8003386 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]
  }
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033c4:	f7fd fc58 	bl	8000c78 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d10e      	bne.n	80033f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f82d 	bl	8003446 <UART_WaitOnFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e023      	b.n	800343e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b04      	cmp	r3, #4
 8003402:	d10e      	bne.n	8003422 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f817 	bl	8003446 <UART_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e00d      	b.n	800343e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b09c      	sub	sp, #112	; 0x70
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	4613      	mov	r3, r2
 8003454:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003456:	e0a5      	b.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	f000 80a1 	beq.w	80035a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7fd fc09 	bl	8000c78 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <UART_WaitOnFlagUntilTimeout+0x32>
 8003472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003474:	2b00      	cmp	r3, #0
 8003476:	d13e      	bne.n	80034f6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003480:	e853 3f00 	ldrex	r3, [r3]
 8003484:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003488:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800348c:	667b      	str	r3, [r7, #100]	; 0x64
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003496:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003498:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800349c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80034a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e6      	bne.n	8003478 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3308      	adds	r3, #8
 80034b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	663b      	str	r3, [r7, #96]	; 0x60
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3308      	adds	r3, #8
 80034c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80034cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80034d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e5      	bne.n	80034aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e067      	b.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d04f      	beq.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003512:	d147      	bne.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800351c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003532:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
 800353e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e6      	bne.n	800351e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3308      	adds	r3, #8
 8003556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	613b      	str	r3, [r7, #16]
   return(result);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	66bb      	str	r3, [r7, #104]	; 0x68
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3308      	adds	r3, #8
 800356e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003570:	623a      	str	r2, [r7, #32]
 8003572:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	69f9      	ldr	r1, [r7, #28]
 8003576:	6a3a      	ldr	r2, [r7, #32]
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	61bb      	str	r3, [r7, #24]
   return(result);
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e5      	bne.n	8003550 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e010      	b.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69da      	ldr	r2, [r3, #28]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4013      	ands	r3, r2
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	bf0c      	ite	eq
 80035b4:	2301      	moveq	r3, #1
 80035b6:	2300      	movne	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	429a      	cmp	r2, r3
 80035c0:	f43f af4a 	beq.w	8003458 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3770      	adds	r7, #112	; 0x70
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <__errno>:
 80035d0:	4b01      	ldr	r3, [pc, #4]	; (80035d8 <__errno+0x8>)
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	2000000c 	.word	0x2000000c

080035dc <__libc_init_array>:
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	4d0d      	ldr	r5, [pc, #52]	; (8003614 <__libc_init_array+0x38>)
 80035e0:	4c0d      	ldr	r4, [pc, #52]	; (8003618 <__libc_init_array+0x3c>)
 80035e2:	1b64      	subs	r4, r4, r5
 80035e4:	10a4      	asrs	r4, r4, #2
 80035e6:	2600      	movs	r6, #0
 80035e8:	42a6      	cmp	r6, r4
 80035ea:	d109      	bne.n	8003600 <__libc_init_array+0x24>
 80035ec:	4d0b      	ldr	r5, [pc, #44]	; (800361c <__libc_init_array+0x40>)
 80035ee:	4c0c      	ldr	r4, [pc, #48]	; (8003620 <__libc_init_array+0x44>)
 80035f0:	f000 ffae 	bl	8004550 <_init>
 80035f4:	1b64      	subs	r4, r4, r5
 80035f6:	10a4      	asrs	r4, r4, #2
 80035f8:	2600      	movs	r6, #0
 80035fa:	42a6      	cmp	r6, r4
 80035fc:	d105      	bne.n	800360a <__libc_init_array+0x2e>
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
 8003600:	f855 3b04 	ldr.w	r3, [r5], #4
 8003604:	4798      	blx	r3
 8003606:	3601      	adds	r6, #1
 8003608:	e7ee      	b.n	80035e8 <__libc_init_array+0xc>
 800360a:	f855 3b04 	ldr.w	r3, [r5], #4
 800360e:	4798      	blx	r3
 8003610:	3601      	adds	r6, #1
 8003612:	e7f2      	b.n	80035fa <__libc_init_array+0x1e>
 8003614:	08004660 	.word	0x08004660
 8003618:	08004660 	.word	0x08004660
 800361c:	08004660 	.word	0x08004660
 8003620:	08004664 	.word	0x08004664

08003624 <memset>:
 8003624:	4402      	add	r2, r0
 8003626:	4603      	mov	r3, r0
 8003628:	4293      	cmp	r3, r2
 800362a:	d100      	bne.n	800362e <memset+0xa>
 800362c:	4770      	bx	lr
 800362e:	f803 1b01 	strb.w	r1, [r3], #1
 8003632:	e7f9      	b.n	8003628 <memset+0x4>

08003634 <iprintf>:
 8003634:	b40f      	push	{r0, r1, r2, r3}
 8003636:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <iprintf+0x2c>)
 8003638:	b513      	push	{r0, r1, r4, lr}
 800363a:	681c      	ldr	r4, [r3, #0]
 800363c:	b124      	cbz	r4, 8003648 <iprintf+0x14>
 800363e:	69a3      	ldr	r3, [r4, #24]
 8003640:	b913      	cbnz	r3, 8003648 <iprintf+0x14>
 8003642:	4620      	mov	r0, r4
 8003644:	f000 f866 	bl	8003714 <__sinit>
 8003648:	ab05      	add	r3, sp, #20
 800364a:	9a04      	ldr	r2, [sp, #16]
 800364c:	68a1      	ldr	r1, [r4, #8]
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	4620      	mov	r0, r4
 8003652:	f000 f9bd 	bl	80039d0 <_vfiprintf_r>
 8003656:	b002      	add	sp, #8
 8003658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800365c:	b004      	add	sp, #16
 800365e:	4770      	bx	lr
 8003660:	2000000c 	.word	0x2000000c

08003664 <std>:
 8003664:	2300      	movs	r3, #0
 8003666:	b510      	push	{r4, lr}
 8003668:	4604      	mov	r4, r0
 800366a:	e9c0 3300 	strd	r3, r3, [r0]
 800366e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003672:	6083      	str	r3, [r0, #8]
 8003674:	8181      	strh	r1, [r0, #12]
 8003676:	6643      	str	r3, [r0, #100]	; 0x64
 8003678:	81c2      	strh	r2, [r0, #14]
 800367a:	6183      	str	r3, [r0, #24]
 800367c:	4619      	mov	r1, r3
 800367e:	2208      	movs	r2, #8
 8003680:	305c      	adds	r0, #92	; 0x5c
 8003682:	f7ff ffcf 	bl	8003624 <memset>
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <std+0x38>)
 8003688:	6263      	str	r3, [r4, #36]	; 0x24
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <std+0x3c>)
 800368c:	62a3      	str	r3, [r4, #40]	; 0x28
 800368e:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <std+0x40>)
 8003690:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <std+0x44>)
 8003694:	6224      	str	r4, [r4, #32]
 8003696:	6323      	str	r3, [r4, #48]	; 0x30
 8003698:	bd10      	pop	{r4, pc}
 800369a:	bf00      	nop
 800369c:	08003f79 	.word	0x08003f79
 80036a0:	08003f9b 	.word	0x08003f9b
 80036a4:	08003fd3 	.word	0x08003fd3
 80036a8:	08003ff7 	.word	0x08003ff7

080036ac <_cleanup_r>:
 80036ac:	4901      	ldr	r1, [pc, #4]	; (80036b4 <_cleanup_r+0x8>)
 80036ae:	f000 b8af 	b.w	8003810 <_fwalk_reent>
 80036b2:	bf00      	nop
 80036b4:	080042d1 	.word	0x080042d1

080036b8 <__sfmoreglue>:
 80036b8:	b570      	push	{r4, r5, r6, lr}
 80036ba:	2268      	movs	r2, #104	; 0x68
 80036bc:	1e4d      	subs	r5, r1, #1
 80036be:	4355      	muls	r5, r2
 80036c0:	460e      	mov	r6, r1
 80036c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80036c6:	f000 f8e5 	bl	8003894 <_malloc_r>
 80036ca:	4604      	mov	r4, r0
 80036cc:	b140      	cbz	r0, 80036e0 <__sfmoreglue+0x28>
 80036ce:	2100      	movs	r1, #0
 80036d0:	e9c0 1600 	strd	r1, r6, [r0]
 80036d4:	300c      	adds	r0, #12
 80036d6:	60a0      	str	r0, [r4, #8]
 80036d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80036dc:	f7ff ffa2 	bl	8003624 <memset>
 80036e0:	4620      	mov	r0, r4
 80036e2:	bd70      	pop	{r4, r5, r6, pc}

080036e4 <__sfp_lock_acquire>:
 80036e4:	4801      	ldr	r0, [pc, #4]	; (80036ec <__sfp_lock_acquire+0x8>)
 80036e6:	f000 b8b3 	b.w	8003850 <__retarget_lock_acquire_recursive>
 80036ea:	bf00      	nop
 80036ec:	2000013d 	.word	0x2000013d

080036f0 <__sfp_lock_release>:
 80036f0:	4801      	ldr	r0, [pc, #4]	; (80036f8 <__sfp_lock_release+0x8>)
 80036f2:	f000 b8ae 	b.w	8003852 <__retarget_lock_release_recursive>
 80036f6:	bf00      	nop
 80036f8:	2000013d 	.word	0x2000013d

080036fc <__sinit_lock_acquire>:
 80036fc:	4801      	ldr	r0, [pc, #4]	; (8003704 <__sinit_lock_acquire+0x8>)
 80036fe:	f000 b8a7 	b.w	8003850 <__retarget_lock_acquire_recursive>
 8003702:	bf00      	nop
 8003704:	2000013e 	.word	0x2000013e

08003708 <__sinit_lock_release>:
 8003708:	4801      	ldr	r0, [pc, #4]	; (8003710 <__sinit_lock_release+0x8>)
 800370a:	f000 b8a2 	b.w	8003852 <__retarget_lock_release_recursive>
 800370e:	bf00      	nop
 8003710:	2000013e 	.word	0x2000013e

08003714 <__sinit>:
 8003714:	b510      	push	{r4, lr}
 8003716:	4604      	mov	r4, r0
 8003718:	f7ff fff0 	bl	80036fc <__sinit_lock_acquire>
 800371c:	69a3      	ldr	r3, [r4, #24]
 800371e:	b11b      	cbz	r3, 8003728 <__sinit+0x14>
 8003720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003724:	f7ff bff0 	b.w	8003708 <__sinit_lock_release>
 8003728:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800372c:	6523      	str	r3, [r4, #80]	; 0x50
 800372e:	4b13      	ldr	r3, [pc, #76]	; (800377c <__sinit+0x68>)
 8003730:	4a13      	ldr	r2, [pc, #76]	; (8003780 <__sinit+0x6c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	62a2      	str	r2, [r4, #40]	; 0x28
 8003736:	42a3      	cmp	r3, r4
 8003738:	bf04      	itt	eq
 800373a:	2301      	moveq	r3, #1
 800373c:	61a3      	streq	r3, [r4, #24]
 800373e:	4620      	mov	r0, r4
 8003740:	f000 f820 	bl	8003784 <__sfp>
 8003744:	6060      	str	r0, [r4, #4]
 8003746:	4620      	mov	r0, r4
 8003748:	f000 f81c 	bl	8003784 <__sfp>
 800374c:	60a0      	str	r0, [r4, #8]
 800374e:	4620      	mov	r0, r4
 8003750:	f000 f818 	bl	8003784 <__sfp>
 8003754:	2200      	movs	r2, #0
 8003756:	60e0      	str	r0, [r4, #12]
 8003758:	2104      	movs	r1, #4
 800375a:	6860      	ldr	r0, [r4, #4]
 800375c:	f7ff ff82 	bl	8003664 <std>
 8003760:	68a0      	ldr	r0, [r4, #8]
 8003762:	2201      	movs	r2, #1
 8003764:	2109      	movs	r1, #9
 8003766:	f7ff ff7d 	bl	8003664 <std>
 800376a:	68e0      	ldr	r0, [r4, #12]
 800376c:	2202      	movs	r2, #2
 800376e:	2112      	movs	r1, #18
 8003770:	f7ff ff78 	bl	8003664 <std>
 8003774:	2301      	movs	r3, #1
 8003776:	61a3      	str	r3, [r4, #24]
 8003778:	e7d2      	b.n	8003720 <__sinit+0xc>
 800377a:	bf00      	nop
 800377c:	080045c0 	.word	0x080045c0
 8003780:	080036ad 	.word	0x080036ad

08003784 <__sfp>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	4607      	mov	r7, r0
 8003788:	f7ff ffac 	bl	80036e4 <__sfp_lock_acquire>
 800378c:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <__sfp+0x84>)
 800378e:	681e      	ldr	r6, [r3, #0]
 8003790:	69b3      	ldr	r3, [r6, #24]
 8003792:	b913      	cbnz	r3, 800379a <__sfp+0x16>
 8003794:	4630      	mov	r0, r6
 8003796:	f7ff ffbd 	bl	8003714 <__sinit>
 800379a:	3648      	adds	r6, #72	; 0x48
 800379c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	d503      	bpl.n	80037ac <__sfp+0x28>
 80037a4:	6833      	ldr	r3, [r6, #0]
 80037a6:	b30b      	cbz	r3, 80037ec <__sfp+0x68>
 80037a8:	6836      	ldr	r6, [r6, #0]
 80037aa:	e7f7      	b.n	800379c <__sfp+0x18>
 80037ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80037b0:	b9d5      	cbnz	r5, 80037e8 <__sfp+0x64>
 80037b2:	4b16      	ldr	r3, [pc, #88]	; (800380c <__sfp+0x88>)
 80037b4:	60e3      	str	r3, [r4, #12]
 80037b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80037ba:	6665      	str	r5, [r4, #100]	; 0x64
 80037bc:	f000 f847 	bl	800384e <__retarget_lock_init_recursive>
 80037c0:	f7ff ff96 	bl	80036f0 <__sfp_lock_release>
 80037c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80037c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80037cc:	6025      	str	r5, [r4, #0]
 80037ce:	61a5      	str	r5, [r4, #24]
 80037d0:	2208      	movs	r2, #8
 80037d2:	4629      	mov	r1, r5
 80037d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80037d8:	f7ff ff24 	bl	8003624 <memset>
 80037dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80037e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80037e4:	4620      	mov	r0, r4
 80037e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e8:	3468      	adds	r4, #104	; 0x68
 80037ea:	e7d9      	b.n	80037a0 <__sfp+0x1c>
 80037ec:	2104      	movs	r1, #4
 80037ee:	4638      	mov	r0, r7
 80037f0:	f7ff ff62 	bl	80036b8 <__sfmoreglue>
 80037f4:	4604      	mov	r4, r0
 80037f6:	6030      	str	r0, [r6, #0]
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d1d5      	bne.n	80037a8 <__sfp+0x24>
 80037fc:	f7ff ff78 	bl	80036f0 <__sfp_lock_release>
 8003800:	230c      	movs	r3, #12
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	e7ee      	b.n	80037e4 <__sfp+0x60>
 8003806:	bf00      	nop
 8003808:	080045c0 	.word	0x080045c0
 800380c:	ffff0001 	.word	0xffff0001

08003810 <_fwalk_reent>:
 8003810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003814:	4606      	mov	r6, r0
 8003816:	4688      	mov	r8, r1
 8003818:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800381c:	2700      	movs	r7, #0
 800381e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003822:	f1b9 0901 	subs.w	r9, r9, #1
 8003826:	d505      	bpl.n	8003834 <_fwalk_reent+0x24>
 8003828:	6824      	ldr	r4, [r4, #0]
 800382a:	2c00      	cmp	r4, #0
 800382c:	d1f7      	bne.n	800381e <_fwalk_reent+0xe>
 800382e:	4638      	mov	r0, r7
 8003830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003834:	89ab      	ldrh	r3, [r5, #12]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d907      	bls.n	800384a <_fwalk_reent+0x3a>
 800383a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800383e:	3301      	adds	r3, #1
 8003840:	d003      	beq.n	800384a <_fwalk_reent+0x3a>
 8003842:	4629      	mov	r1, r5
 8003844:	4630      	mov	r0, r6
 8003846:	47c0      	blx	r8
 8003848:	4307      	orrs	r7, r0
 800384a:	3568      	adds	r5, #104	; 0x68
 800384c:	e7e9      	b.n	8003822 <_fwalk_reent+0x12>

0800384e <__retarget_lock_init_recursive>:
 800384e:	4770      	bx	lr

08003850 <__retarget_lock_acquire_recursive>:
 8003850:	4770      	bx	lr

08003852 <__retarget_lock_release_recursive>:
 8003852:	4770      	bx	lr

08003854 <sbrk_aligned>:
 8003854:	b570      	push	{r4, r5, r6, lr}
 8003856:	4e0e      	ldr	r6, [pc, #56]	; (8003890 <sbrk_aligned+0x3c>)
 8003858:	460c      	mov	r4, r1
 800385a:	6831      	ldr	r1, [r6, #0]
 800385c:	4605      	mov	r5, r0
 800385e:	b911      	cbnz	r1, 8003866 <sbrk_aligned+0x12>
 8003860:	f000 fb7a 	bl	8003f58 <_sbrk_r>
 8003864:	6030      	str	r0, [r6, #0]
 8003866:	4621      	mov	r1, r4
 8003868:	4628      	mov	r0, r5
 800386a:	f000 fb75 	bl	8003f58 <_sbrk_r>
 800386e:	1c43      	adds	r3, r0, #1
 8003870:	d00a      	beq.n	8003888 <sbrk_aligned+0x34>
 8003872:	1cc4      	adds	r4, r0, #3
 8003874:	f024 0403 	bic.w	r4, r4, #3
 8003878:	42a0      	cmp	r0, r4
 800387a:	d007      	beq.n	800388c <sbrk_aligned+0x38>
 800387c:	1a21      	subs	r1, r4, r0
 800387e:	4628      	mov	r0, r5
 8003880:	f000 fb6a 	bl	8003f58 <_sbrk_r>
 8003884:	3001      	adds	r0, #1
 8003886:	d101      	bne.n	800388c <sbrk_aligned+0x38>
 8003888:	f04f 34ff 	mov.w	r4, #4294967295
 800388c:	4620      	mov	r0, r4
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	20000144 	.word	0x20000144

08003894 <_malloc_r>:
 8003894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003898:	1ccd      	adds	r5, r1, #3
 800389a:	f025 0503 	bic.w	r5, r5, #3
 800389e:	3508      	adds	r5, #8
 80038a0:	2d0c      	cmp	r5, #12
 80038a2:	bf38      	it	cc
 80038a4:	250c      	movcc	r5, #12
 80038a6:	2d00      	cmp	r5, #0
 80038a8:	4607      	mov	r7, r0
 80038aa:	db01      	blt.n	80038b0 <_malloc_r+0x1c>
 80038ac:	42a9      	cmp	r1, r5
 80038ae:	d905      	bls.n	80038bc <_malloc_r+0x28>
 80038b0:	230c      	movs	r3, #12
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	2600      	movs	r6, #0
 80038b6:	4630      	mov	r0, r6
 80038b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038bc:	4e2e      	ldr	r6, [pc, #184]	; (8003978 <_malloc_r+0xe4>)
 80038be:	f000 fdbb 	bl	8004438 <__malloc_lock>
 80038c2:	6833      	ldr	r3, [r6, #0]
 80038c4:	461c      	mov	r4, r3
 80038c6:	bb34      	cbnz	r4, 8003916 <_malloc_r+0x82>
 80038c8:	4629      	mov	r1, r5
 80038ca:	4638      	mov	r0, r7
 80038cc:	f7ff ffc2 	bl	8003854 <sbrk_aligned>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	4604      	mov	r4, r0
 80038d4:	d14d      	bne.n	8003972 <_malloc_r+0xde>
 80038d6:	6834      	ldr	r4, [r6, #0]
 80038d8:	4626      	mov	r6, r4
 80038da:	2e00      	cmp	r6, #0
 80038dc:	d140      	bne.n	8003960 <_malloc_r+0xcc>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	4631      	mov	r1, r6
 80038e2:	4638      	mov	r0, r7
 80038e4:	eb04 0803 	add.w	r8, r4, r3
 80038e8:	f000 fb36 	bl	8003f58 <_sbrk_r>
 80038ec:	4580      	cmp	r8, r0
 80038ee:	d13a      	bne.n	8003966 <_malloc_r+0xd2>
 80038f0:	6821      	ldr	r1, [r4, #0]
 80038f2:	3503      	adds	r5, #3
 80038f4:	1a6d      	subs	r5, r5, r1
 80038f6:	f025 0503 	bic.w	r5, r5, #3
 80038fa:	3508      	adds	r5, #8
 80038fc:	2d0c      	cmp	r5, #12
 80038fe:	bf38      	it	cc
 8003900:	250c      	movcc	r5, #12
 8003902:	4629      	mov	r1, r5
 8003904:	4638      	mov	r0, r7
 8003906:	f7ff ffa5 	bl	8003854 <sbrk_aligned>
 800390a:	3001      	adds	r0, #1
 800390c:	d02b      	beq.n	8003966 <_malloc_r+0xd2>
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	442b      	add	r3, r5
 8003912:	6023      	str	r3, [r4, #0]
 8003914:	e00e      	b.n	8003934 <_malloc_r+0xa0>
 8003916:	6822      	ldr	r2, [r4, #0]
 8003918:	1b52      	subs	r2, r2, r5
 800391a:	d41e      	bmi.n	800395a <_malloc_r+0xc6>
 800391c:	2a0b      	cmp	r2, #11
 800391e:	d916      	bls.n	800394e <_malloc_r+0xba>
 8003920:	1961      	adds	r1, r4, r5
 8003922:	42a3      	cmp	r3, r4
 8003924:	6025      	str	r5, [r4, #0]
 8003926:	bf18      	it	ne
 8003928:	6059      	strne	r1, [r3, #4]
 800392a:	6863      	ldr	r3, [r4, #4]
 800392c:	bf08      	it	eq
 800392e:	6031      	streq	r1, [r6, #0]
 8003930:	5162      	str	r2, [r4, r5]
 8003932:	604b      	str	r3, [r1, #4]
 8003934:	4638      	mov	r0, r7
 8003936:	f104 060b 	add.w	r6, r4, #11
 800393a:	f000 fd83 	bl	8004444 <__malloc_unlock>
 800393e:	f026 0607 	bic.w	r6, r6, #7
 8003942:	1d23      	adds	r3, r4, #4
 8003944:	1af2      	subs	r2, r6, r3
 8003946:	d0b6      	beq.n	80038b6 <_malloc_r+0x22>
 8003948:	1b9b      	subs	r3, r3, r6
 800394a:	50a3      	str	r3, [r4, r2]
 800394c:	e7b3      	b.n	80038b6 <_malloc_r+0x22>
 800394e:	6862      	ldr	r2, [r4, #4]
 8003950:	42a3      	cmp	r3, r4
 8003952:	bf0c      	ite	eq
 8003954:	6032      	streq	r2, [r6, #0]
 8003956:	605a      	strne	r2, [r3, #4]
 8003958:	e7ec      	b.n	8003934 <_malloc_r+0xa0>
 800395a:	4623      	mov	r3, r4
 800395c:	6864      	ldr	r4, [r4, #4]
 800395e:	e7b2      	b.n	80038c6 <_malloc_r+0x32>
 8003960:	4634      	mov	r4, r6
 8003962:	6876      	ldr	r6, [r6, #4]
 8003964:	e7b9      	b.n	80038da <_malloc_r+0x46>
 8003966:	230c      	movs	r3, #12
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	4638      	mov	r0, r7
 800396c:	f000 fd6a 	bl	8004444 <__malloc_unlock>
 8003970:	e7a1      	b.n	80038b6 <_malloc_r+0x22>
 8003972:	6025      	str	r5, [r4, #0]
 8003974:	e7de      	b.n	8003934 <_malloc_r+0xa0>
 8003976:	bf00      	nop
 8003978:	20000140 	.word	0x20000140

0800397c <__sfputc_r>:
 800397c:	6893      	ldr	r3, [r2, #8]
 800397e:	3b01      	subs	r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	b410      	push	{r4}
 8003984:	6093      	str	r3, [r2, #8]
 8003986:	da08      	bge.n	800399a <__sfputc_r+0x1e>
 8003988:	6994      	ldr	r4, [r2, #24]
 800398a:	42a3      	cmp	r3, r4
 800398c:	db01      	blt.n	8003992 <__sfputc_r+0x16>
 800398e:	290a      	cmp	r1, #10
 8003990:	d103      	bne.n	800399a <__sfputc_r+0x1e>
 8003992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003996:	f000 bb33 	b.w	8004000 <__swbuf_r>
 800399a:	6813      	ldr	r3, [r2, #0]
 800399c:	1c58      	adds	r0, r3, #1
 800399e:	6010      	str	r0, [r2, #0]
 80039a0:	7019      	strb	r1, [r3, #0]
 80039a2:	4608      	mov	r0, r1
 80039a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <__sfputs_r>:
 80039aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ac:	4606      	mov	r6, r0
 80039ae:	460f      	mov	r7, r1
 80039b0:	4614      	mov	r4, r2
 80039b2:	18d5      	adds	r5, r2, r3
 80039b4:	42ac      	cmp	r4, r5
 80039b6:	d101      	bne.n	80039bc <__sfputs_r+0x12>
 80039b8:	2000      	movs	r0, #0
 80039ba:	e007      	b.n	80039cc <__sfputs_r+0x22>
 80039bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039c0:	463a      	mov	r2, r7
 80039c2:	4630      	mov	r0, r6
 80039c4:	f7ff ffda 	bl	800397c <__sfputc_r>
 80039c8:	1c43      	adds	r3, r0, #1
 80039ca:	d1f3      	bne.n	80039b4 <__sfputs_r+0xa>
 80039cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039d0 <_vfiprintf_r>:
 80039d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d4:	460d      	mov	r5, r1
 80039d6:	b09d      	sub	sp, #116	; 0x74
 80039d8:	4614      	mov	r4, r2
 80039da:	4698      	mov	r8, r3
 80039dc:	4606      	mov	r6, r0
 80039de:	b118      	cbz	r0, 80039e8 <_vfiprintf_r+0x18>
 80039e0:	6983      	ldr	r3, [r0, #24]
 80039e2:	b90b      	cbnz	r3, 80039e8 <_vfiprintf_r+0x18>
 80039e4:	f7ff fe96 	bl	8003714 <__sinit>
 80039e8:	4b89      	ldr	r3, [pc, #548]	; (8003c10 <_vfiprintf_r+0x240>)
 80039ea:	429d      	cmp	r5, r3
 80039ec:	d11b      	bne.n	8003a26 <_vfiprintf_r+0x56>
 80039ee:	6875      	ldr	r5, [r6, #4]
 80039f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039f2:	07d9      	lsls	r1, r3, #31
 80039f4:	d405      	bmi.n	8003a02 <_vfiprintf_r+0x32>
 80039f6:	89ab      	ldrh	r3, [r5, #12]
 80039f8:	059a      	lsls	r2, r3, #22
 80039fa:	d402      	bmi.n	8003a02 <_vfiprintf_r+0x32>
 80039fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039fe:	f7ff ff27 	bl	8003850 <__retarget_lock_acquire_recursive>
 8003a02:	89ab      	ldrh	r3, [r5, #12]
 8003a04:	071b      	lsls	r3, r3, #28
 8003a06:	d501      	bpl.n	8003a0c <_vfiprintf_r+0x3c>
 8003a08:	692b      	ldr	r3, [r5, #16]
 8003a0a:	b9eb      	cbnz	r3, 8003a48 <_vfiprintf_r+0x78>
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	4630      	mov	r0, r6
 8003a10:	f000 fb5a 	bl	80040c8 <__swsetup_r>
 8003a14:	b1c0      	cbz	r0, 8003a48 <_vfiprintf_r+0x78>
 8003a16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a18:	07dc      	lsls	r4, r3, #31
 8003a1a:	d50e      	bpl.n	8003a3a <_vfiprintf_r+0x6a>
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a20:	b01d      	add	sp, #116	; 0x74
 8003a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a26:	4b7b      	ldr	r3, [pc, #492]	; (8003c14 <_vfiprintf_r+0x244>)
 8003a28:	429d      	cmp	r5, r3
 8003a2a:	d101      	bne.n	8003a30 <_vfiprintf_r+0x60>
 8003a2c:	68b5      	ldr	r5, [r6, #8]
 8003a2e:	e7df      	b.n	80039f0 <_vfiprintf_r+0x20>
 8003a30:	4b79      	ldr	r3, [pc, #484]	; (8003c18 <_vfiprintf_r+0x248>)
 8003a32:	429d      	cmp	r5, r3
 8003a34:	bf08      	it	eq
 8003a36:	68f5      	ldreq	r5, [r6, #12]
 8003a38:	e7da      	b.n	80039f0 <_vfiprintf_r+0x20>
 8003a3a:	89ab      	ldrh	r3, [r5, #12]
 8003a3c:	0598      	lsls	r0, r3, #22
 8003a3e:	d4ed      	bmi.n	8003a1c <_vfiprintf_r+0x4c>
 8003a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a42:	f7ff ff06 	bl	8003852 <__retarget_lock_release_recursive>
 8003a46:	e7e9      	b.n	8003a1c <_vfiprintf_r+0x4c>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a4c:	2320      	movs	r3, #32
 8003a4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a56:	2330      	movs	r3, #48	; 0x30
 8003a58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003c1c <_vfiprintf_r+0x24c>
 8003a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a60:	f04f 0901 	mov.w	r9, #1
 8003a64:	4623      	mov	r3, r4
 8003a66:	469a      	mov	sl, r3
 8003a68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a6c:	b10a      	cbz	r2, 8003a72 <_vfiprintf_r+0xa2>
 8003a6e:	2a25      	cmp	r2, #37	; 0x25
 8003a70:	d1f9      	bne.n	8003a66 <_vfiprintf_r+0x96>
 8003a72:	ebba 0b04 	subs.w	fp, sl, r4
 8003a76:	d00b      	beq.n	8003a90 <_vfiprintf_r+0xc0>
 8003a78:	465b      	mov	r3, fp
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	4630      	mov	r0, r6
 8003a80:	f7ff ff93 	bl	80039aa <__sfputs_r>
 8003a84:	3001      	adds	r0, #1
 8003a86:	f000 80aa 	beq.w	8003bde <_vfiprintf_r+0x20e>
 8003a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a8c:	445a      	add	r2, fp
 8003a8e:	9209      	str	r2, [sp, #36]	; 0x24
 8003a90:	f89a 3000 	ldrb.w	r3, [sl]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80a2 	beq.w	8003bde <_vfiprintf_r+0x20e>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aa4:	f10a 0a01 	add.w	sl, sl, #1
 8003aa8:	9304      	str	r3, [sp, #16]
 8003aaa:	9307      	str	r3, [sp, #28]
 8003aac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ab0:	931a      	str	r3, [sp, #104]	; 0x68
 8003ab2:	4654      	mov	r4, sl
 8003ab4:	2205      	movs	r2, #5
 8003ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aba:	4858      	ldr	r0, [pc, #352]	; (8003c1c <_vfiprintf_r+0x24c>)
 8003abc:	f7fc fb88 	bl	80001d0 <memchr>
 8003ac0:	9a04      	ldr	r2, [sp, #16]
 8003ac2:	b9d8      	cbnz	r0, 8003afc <_vfiprintf_r+0x12c>
 8003ac4:	06d1      	lsls	r1, r2, #27
 8003ac6:	bf44      	itt	mi
 8003ac8:	2320      	movmi	r3, #32
 8003aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ace:	0713      	lsls	r3, r2, #28
 8003ad0:	bf44      	itt	mi
 8003ad2:	232b      	movmi	r3, #43	; 0x2b
 8003ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8003adc:	2b2a      	cmp	r3, #42	; 0x2a
 8003ade:	d015      	beq.n	8003b0c <_vfiprintf_r+0x13c>
 8003ae0:	9a07      	ldr	r2, [sp, #28]
 8003ae2:	4654      	mov	r4, sl
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f04f 0c0a 	mov.w	ip, #10
 8003aea:	4621      	mov	r1, r4
 8003aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003af0:	3b30      	subs	r3, #48	; 0x30
 8003af2:	2b09      	cmp	r3, #9
 8003af4:	d94e      	bls.n	8003b94 <_vfiprintf_r+0x1c4>
 8003af6:	b1b0      	cbz	r0, 8003b26 <_vfiprintf_r+0x156>
 8003af8:	9207      	str	r2, [sp, #28]
 8003afa:	e014      	b.n	8003b26 <_vfiprintf_r+0x156>
 8003afc:	eba0 0308 	sub.w	r3, r0, r8
 8003b00:	fa09 f303 	lsl.w	r3, r9, r3
 8003b04:	4313      	orrs	r3, r2
 8003b06:	9304      	str	r3, [sp, #16]
 8003b08:	46a2      	mov	sl, r4
 8003b0a:	e7d2      	b.n	8003ab2 <_vfiprintf_r+0xe2>
 8003b0c:	9b03      	ldr	r3, [sp, #12]
 8003b0e:	1d19      	adds	r1, r3, #4
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	9103      	str	r1, [sp, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bfbb      	ittet	lt
 8003b18:	425b      	neglt	r3, r3
 8003b1a:	f042 0202 	orrlt.w	r2, r2, #2
 8003b1e:	9307      	strge	r3, [sp, #28]
 8003b20:	9307      	strlt	r3, [sp, #28]
 8003b22:	bfb8      	it	lt
 8003b24:	9204      	strlt	r2, [sp, #16]
 8003b26:	7823      	ldrb	r3, [r4, #0]
 8003b28:	2b2e      	cmp	r3, #46	; 0x2e
 8003b2a:	d10c      	bne.n	8003b46 <_vfiprintf_r+0x176>
 8003b2c:	7863      	ldrb	r3, [r4, #1]
 8003b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b30:	d135      	bne.n	8003b9e <_vfiprintf_r+0x1ce>
 8003b32:	9b03      	ldr	r3, [sp, #12]
 8003b34:	1d1a      	adds	r2, r3, #4
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	9203      	str	r2, [sp, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bfb8      	it	lt
 8003b3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b42:	3402      	adds	r4, #2
 8003b44:	9305      	str	r3, [sp, #20]
 8003b46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003c2c <_vfiprintf_r+0x25c>
 8003b4a:	7821      	ldrb	r1, [r4, #0]
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	4650      	mov	r0, sl
 8003b50:	f7fc fb3e 	bl	80001d0 <memchr>
 8003b54:	b140      	cbz	r0, 8003b68 <_vfiprintf_r+0x198>
 8003b56:	2340      	movs	r3, #64	; 0x40
 8003b58:	eba0 000a 	sub.w	r0, r0, sl
 8003b5c:	fa03 f000 	lsl.w	r0, r3, r0
 8003b60:	9b04      	ldr	r3, [sp, #16]
 8003b62:	4303      	orrs	r3, r0
 8003b64:	3401      	adds	r4, #1
 8003b66:	9304      	str	r3, [sp, #16]
 8003b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b6c:	482c      	ldr	r0, [pc, #176]	; (8003c20 <_vfiprintf_r+0x250>)
 8003b6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b72:	2206      	movs	r2, #6
 8003b74:	f7fc fb2c 	bl	80001d0 <memchr>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d03f      	beq.n	8003bfc <_vfiprintf_r+0x22c>
 8003b7c:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <_vfiprintf_r+0x254>)
 8003b7e:	bb1b      	cbnz	r3, 8003bc8 <_vfiprintf_r+0x1f8>
 8003b80:	9b03      	ldr	r3, [sp, #12]
 8003b82:	3307      	adds	r3, #7
 8003b84:	f023 0307 	bic.w	r3, r3, #7
 8003b88:	3308      	adds	r3, #8
 8003b8a:	9303      	str	r3, [sp, #12]
 8003b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b8e:	443b      	add	r3, r7
 8003b90:	9309      	str	r3, [sp, #36]	; 0x24
 8003b92:	e767      	b.n	8003a64 <_vfiprintf_r+0x94>
 8003b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b98:	460c      	mov	r4, r1
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	e7a5      	b.n	8003aea <_vfiprintf_r+0x11a>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	3401      	adds	r4, #1
 8003ba2:	9305      	str	r3, [sp, #20]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f04f 0c0a 	mov.w	ip, #10
 8003baa:	4620      	mov	r0, r4
 8003bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bb0:	3a30      	subs	r2, #48	; 0x30
 8003bb2:	2a09      	cmp	r2, #9
 8003bb4:	d903      	bls.n	8003bbe <_vfiprintf_r+0x1ee>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0c5      	beq.n	8003b46 <_vfiprintf_r+0x176>
 8003bba:	9105      	str	r1, [sp, #20]
 8003bbc:	e7c3      	b.n	8003b46 <_vfiprintf_r+0x176>
 8003bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e7f0      	b.n	8003baa <_vfiprintf_r+0x1da>
 8003bc8:	ab03      	add	r3, sp, #12
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	462a      	mov	r2, r5
 8003bce:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <_vfiprintf_r+0x258>)
 8003bd0:	a904      	add	r1, sp, #16
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	f3af 8000 	nop.w
 8003bd8:	4607      	mov	r7, r0
 8003bda:	1c78      	adds	r0, r7, #1
 8003bdc:	d1d6      	bne.n	8003b8c <_vfiprintf_r+0x1bc>
 8003bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003be0:	07d9      	lsls	r1, r3, #31
 8003be2:	d405      	bmi.n	8003bf0 <_vfiprintf_r+0x220>
 8003be4:	89ab      	ldrh	r3, [r5, #12]
 8003be6:	059a      	lsls	r2, r3, #22
 8003be8:	d402      	bmi.n	8003bf0 <_vfiprintf_r+0x220>
 8003bea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bec:	f7ff fe31 	bl	8003852 <__retarget_lock_release_recursive>
 8003bf0:	89ab      	ldrh	r3, [r5, #12]
 8003bf2:	065b      	lsls	r3, r3, #25
 8003bf4:	f53f af12 	bmi.w	8003a1c <_vfiprintf_r+0x4c>
 8003bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bfa:	e711      	b.n	8003a20 <_vfiprintf_r+0x50>
 8003bfc:	ab03      	add	r3, sp, #12
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	462a      	mov	r2, r5
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <_vfiprintf_r+0x258>)
 8003c04:	a904      	add	r1, sp, #16
 8003c06:	4630      	mov	r0, r6
 8003c08:	f000 f880 	bl	8003d0c <_printf_i>
 8003c0c:	e7e4      	b.n	8003bd8 <_vfiprintf_r+0x208>
 8003c0e:	bf00      	nop
 8003c10:	080045e4 	.word	0x080045e4
 8003c14:	08004604 	.word	0x08004604
 8003c18:	080045c4 	.word	0x080045c4
 8003c1c:	08004624 	.word	0x08004624
 8003c20:	0800462e 	.word	0x0800462e
 8003c24:	00000000 	.word	0x00000000
 8003c28:	080039ab 	.word	0x080039ab
 8003c2c:	0800462a 	.word	0x0800462a

08003c30 <_printf_common>:
 8003c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c34:	4616      	mov	r6, r2
 8003c36:	4699      	mov	r9, r3
 8003c38:	688a      	ldr	r2, [r1, #8]
 8003c3a:	690b      	ldr	r3, [r1, #16]
 8003c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c40:	4293      	cmp	r3, r2
 8003c42:	bfb8      	it	lt
 8003c44:	4613      	movlt	r3, r2
 8003c46:	6033      	str	r3, [r6, #0]
 8003c48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c4c:	4607      	mov	r7, r0
 8003c4e:	460c      	mov	r4, r1
 8003c50:	b10a      	cbz	r2, 8003c56 <_printf_common+0x26>
 8003c52:	3301      	adds	r3, #1
 8003c54:	6033      	str	r3, [r6, #0]
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	0699      	lsls	r1, r3, #26
 8003c5a:	bf42      	ittt	mi
 8003c5c:	6833      	ldrmi	r3, [r6, #0]
 8003c5e:	3302      	addmi	r3, #2
 8003c60:	6033      	strmi	r3, [r6, #0]
 8003c62:	6825      	ldr	r5, [r4, #0]
 8003c64:	f015 0506 	ands.w	r5, r5, #6
 8003c68:	d106      	bne.n	8003c78 <_printf_common+0x48>
 8003c6a:	f104 0a19 	add.w	sl, r4, #25
 8003c6e:	68e3      	ldr	r3, [r4, #12]
 8003c70:	6832      	ldr	r2, [r6, #0]
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	42ab      	cmp	r3, r5
 8003c76:	dc26      	bgt.n	8003cc6 <_printf_common+0x96>
 8003c78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c7c:	1e13      	subs	r3, r2, #0
 8003c7e:	6822      	ldr	r2, [r4, #0]
 8003c80:	bf18      	it	ne
 8003c82:	2301      	movne	r3, #1
 8003c84:	0692      	lsls	r2, r2, #26
 8003c86:	d42b      	bmi.n	8003ce0 <_printf_common+0xb0>
 8003c88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	4638      	mov	r0, r7
 8003c90:	47c0      	blx	r8
 8003c92:	3001      	adds	r0, #1
 8003c94:	d01e      	beq.n	8003cd4 <_printf_common+0xa4>
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	68e5      	ldr	r5, [r4, #12]
 8003c9a:	6832      	ldr	r2, [r6, #0]
 8003c9c:	f003 0306 	and.w	r3, r3, #6
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	bf08      	it	eq
 8003ca4:	1aad      	subeq	r5, r5, r2
 8003ca6:	68a3      	ldr	r3, [r4, #8]
 8003ca8:	6922      	ldr	r2, [r4, #16]
 8003caa:	bf0c      	ite	eq
 8003cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cb0:	2500      	movne	r5, #0
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	bfc4      	itt	gt
 8003cb6:	1a9b      	subgt	r3, r3, r2
 8003cb8:	18ed      	addgt	r5, r5, r3
 8003cba:	2600      	movs	r6, #0
 8003cbc:	341a      	adds	r4, #26
 8003cbe:	42b5      	cmp	r5, r6
 8003cc0:	d11a      	bne.n	8003cf8 <_printf_common+0xc8>
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	e008      	b.n	8003cd8 <_printf_common+0xa8>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	4652      	mov	r2, sl
 8003cca:	4649      	mov	r1, r9
 8003ccc:	4638      	mov	r0, r7
 8003cce:	47c0      	blx	r8
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	d103      	bne.n	8003cdc <_printf_common+0xac>
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cdc:	3501      	adds	r5, #1
 8003cde:	e7c6      	b.n	8003c6e <_printf_common+0x3e>
 8003ce0:	18e1      	adds	r1, r4, r3
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	2030      	movs	r0, #48	; 0x30
 8003ce6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cea:	4422      	add	r2, r4
 8003cec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	e7c7      	b.n	8003c88 <_printf_common+0x58>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	4622      	mov	r2, r4
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	4638      	mov	r0, r7
 8003d00:	47c0      	blx	r8
 8003d02:	3001      	adds	r0, #1
 8003d04:	d0e6      	beq.n	8003cd4 <_printf_common+0xa4>
 8003d06:	3601      	adds	r6, #1
 8003d08:	e7d9      	b.n	8003cbe <_printf_common+0x8e>
	...

08003d0c <_printf_i>:
 8003d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d10:	7e0f      	ldrb	r7, [r1, #24]
 8003d12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d14:	2f78      	cmp	r7, #120	; 0x78
 8003d16:	4691      	mov	r9, r2
 8003d18:	4680      	mov	r8, r0
 8003d1a:	460c      	mov	r4, r1
 8003d1c:	469a      	mov	sl, r3
 8003d1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d22:	d807      	bhi.n	8003d34 <_printf_i+0x28>
 8003d24:	2f62      	cmp	r7, #98	; 0x62
 8003d26:	d80a      	bhi.n	8003d3e <_printf_i+0x32>
 8003d28:	2f00      	cmp	r7, #0
 8003d2a:	f000 80d8 	beq.w	8003ede <_printf_i+0x1d2>
 8003d2e:	2f58      	cmp	r7, #88	; 0x58
 8003d30:	f000 80a3 	beq.w	8003e7a <_printf_i+0x16e>
 8003d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d3c:	e03a      	b.n	8003db4 <_printf_i+0xa8>
 8003d3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d42:	2b15      	cmp	r3, #21
 8003d44:	d8f6      	bhi.n	8003d34 <_printf_i+0x28>
 8003d46:	a101      	add	r1, pc, #4	; (adr r1, 8003d4c <_printf_i+0x40>)
 8003d48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d4c:	08003da5 	.word	0x08003da5
 8003d50:	08003db9 	.word	0x08003db9
 8003d54:	08003d35 	.word	0x08003d35
 8003d58:	08003d35 	.word	0x08003d35
 8003d5c:	08003d35 	.word	0x08003d35
 8003d60:	08003d35 	.word	0x08003d35
 8003d64:	08003db9 	.word	0x08003db9
 8003d68:	08003d35 	.word	0x08003d35
 8003d6c:	08003d35 	.word	0x08003d35
 8003d70:	08003d35 	.word	0x08003d35
 8003d74:	08003d35 	.word	0x08003d35
 8003d78:	08003ec5 	.word	0x08003ec5
 8003d7c:	08003de9 	.word	0x08003de9
 8003d80:	08003ea7 	.word	0x08003ea7
 8003d84:	08003d35 	.word	0x08003d35
 8003d88:	08003d35 	.word	0x08003d35
 8003d8c:	08003ee7 	.word	0x08003ee7
 8003d90:	08003d35 	.word	0x08003d35
 8003d94:	08003de9 	.word	0x08003de9
 8003d98:	08003d35 	.word	0x08003d35
 8003d9c:	08003d35 	.word	0x08003d35
 8003da0:	08003eaf 	.word	0x08003eaf
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	1d1a      	adds	r2, r3, #4
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	602a      	str	r2, [r5, #0]
 8003dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0a3      	b.n	8003f00 <_printf_i+0x1f4>
 8003db8:	6820      	ldr	r0, [r4, #0]
 8003dba:	6829      	ldr	r1, [r5, #0]
 8003dbc:	0606      	lsls	r6, r0, #24
 8003dbe:	f101 0304 	add.w	r3, r1, #4
 8003dc2:	d50a      	bpl.n	8003dda <_printf_i+0xce>
 8003dc4:	680e      	ldr	r6, [r1, #0]
 8003dc6:	602b      	str	r3, [r5, #0]
 8003dc8:	2e00      	cmp	r6, #0
 8003dca:	da03      	bge.n	8003dd4 <_printf_i+0xc8>
 8003dcc:	232d      	movs	r3, #45	; 0x2d
 8003dce:	4276      	negs	r6, r6
 8003dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dd4:	485e      	ldr	r0, [pc, #376]	; (8003f50 <_printf_i+0x244>)
 8003dd6:	230a      	movs	r3, #10
 8003dd8:	e019      	b.n	8003e0e <_printf_i+0x102>
 8003dda:	680e      	ldr	r6, [r1, #0]
 8003ddc:	602b      	str	r3, [r5, #0]
 8003dde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003de2:	bf18      	it	ne
 8003de4:	b236      	sxthne	r6, r6
 8003de6:	e7ef      	b.n	8003dc8 <_printf_i+0xbc>
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	6820      	ldr	r0, [r4, #0]
 8003dec:	1d19      	adds	r1, r3, #4
 8003dee:	6029      	str	r1, [r5, #0]
 8003df0:	0601      	lsls	r1, r0, #24
 8003df2:	d501      	bpl.n	8003df8 <_printf_i+0xec>
 8003df4:	681e      	ldr	r6, [r3, #0]
 8003df6:	e002      	b.n	8003dfe <_printf_i+0xf2>
 8003df8:	0646      	lsls	r6, r0, #25
 8003dfa:	d5fb      	bpl.n	8003df4 <_printf_i+0xe8>
 8003dfc:	881e      	ldrh	r6, [r3, #0]
 8003dfe:	4854      	ldr	r0, [pc, #336]	; (8003f50 <_printf_i+0x244>)
 8003e00:	2f6f      	cmp	r7, #111	; 0x6f
 8003e02:	bf0c      	ite	eq
 8003e04:	2308      	moveq	r3, #8
 8003e06:	230a      	movne	r3, #10
 8003e08:	2100      	movs	r1, #0
 8003e0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e0e:	6865      	ldr	r5, [r4, #4]
 8003e10:	60a5      	str	r5, [r4, #8]
 8003e12:	2d00      	cmp	r5, #0
 8003e14:	bfa2      	ittt	ge
 8003e16:	6821      	ldrge	r1, [r4, #0]
 8003e18:	f021 0104 	bicge.w	r1, r1, #4
 8003e1c:	6021      	strge	r1, [r4, #0]
 8003e1e:	b90e      	cbnz	r6, 8003e24 <_printf_i+0x118>
 8003e20:	2d00      	cmp	r5, #0
 8003e22:	d04d      	beq.n	8003ec0 <_printf_i+0x1b4>
 8003e24:	4615      	mov	r5, r2
 8003e26:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e2a:	fb03 6711 	mls	r7, r3, r1, r6
 8003e2e:	5dc7      	ldrb	r7, [r0, r7]
 8003e30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e34:	4637      	mov	r7, r6
 8003e36:	42bb      	cmp	r3, r7
 8003e38:	460e      	mov	r6, r1
 8003e3a:	d9f4      	bls.n	8003e26 <_printf_i+0x11a>
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d10b      	bne.n	8003e58 <_printf_i+0x14c>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	07de      	lsls	r6, r3, #31
 8003e44:	d508      	bpl.n	8003e58 <_printf_i+0x14c>
 8003e46:	6923      	ldr	r3, [r4, #16]
 8003e48:	6861      	ldr	r1, [r4, #4]
 8003e4a:	4299      	cmp	r1, r3
 8003e4c:	bfde      	ittt	le
 8003e4e:	2330      	movle	r3, #48	; 0x30
 8003e50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e58:	1b52      	subs	r2, r2, r5
 8003e5a:	6122      	str	r2, [r4, #16]
 8003e5c:	f8cd a000 	str.w	sl, [sp]
 8003e60:	464b      	mov	r3, r9
 8003e62:	aa03      	add	r2, sp, #12
 8003e64:	4621      	mov	r1, r4
 8003e66:	4640      	mov	r0, r8
 8003e68:	f7ff fee2 	bl	8003c30 <_printf_common>
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	d14c      	bne.n	8003f0a <_printf_i+0x1fe>
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	b004      	add	sp, #16
 8003e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e7a:	4835      	ldr	r0, [pc, #212]	; (8003f50 <_printf_i+0x244>)
 8003e7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e80:	6829      	ldr	r1, [r5, #0]
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e88:	6029      	str	r1, [r5, #0]
 8003e8a:	061d      	lsls	r5, r3, #24
 8003e8c:	d514      	bpl.n	8003eb8 <_printf_i+0x1ac>
 8003e8e:	07df      	lsls	r7, r3, #31
 8003e90:	bf44      	itt	mi
 8003e92:	f043 0320 	orrmi.w	r3, r3, #32
 8003e96:	6023      	strmi	r3, [r4, #0]
 8003e98:	b91e      	cbnz	r6, 8003ea2 <_printf_i+0x196>
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	f023 0320 	bic.w	r3, r3, #32
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	2310      	movs	r3, #16
 8003ea4:	e7b0      	b.n	8003e08 <_printf_i+0xfc>
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	f043 0320 	orr.w	r3, r3, #32
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	2378      	movs	r3, #120	; 0x78
 8003eb0:	4828      	ldr	r0, [pc, #160]	; (8003f54 <_printf_i+0x248>)
 8003eb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003eb6:	e7e3      	b.n	8003e80 <_printf_i+0x174>
 8003eb8:	0659      	lsls	r1, r3, #25
 8003eba:	bf48      	it	mi
 8003ebc:	b2b6      	uxthmi	r6, r6
 8003ebe:	e7e6      	b.n	8003e8e <_printf_i+0x182>
 8003ec0:	4615      	mov	r5, r2
 8003ec2:	e7bb      	b.n	8003e3c <_printf_i+0x130>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	6826      	ldr	r6, [r4, #0]
 8003ec8:	6961      	ldr	r1, [r4, #20]
 8003eca:	1d18      	adds	r0, r3, #4
 8003ecc:	6028      	str	r0, [r5, #0]
 8003ece:	0635      	lsls	r5, r6, #24
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	d501      	bpl.n	8003ed8 <_printf_i+0x1cc>
 8003ed4:	6019      	str	r1, [r3, #0]
 8003ed6:	e002      	b.n	8003ede <_printf_i+0x1d2>
 8003ed8:	0670      	lsls	r0, r6, #25
 8003eda:	d5fb      	bpl.n	8003ed4 <_printf_i+0x1c8>
 8003edc:	8019      	strh	r1, [r3, #0]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	6123      	str	r3, [r4, #16]
 8003ee2:	4615      	mov	r5, r2
 8003ee4:	e7ba      	b.n	8003e5c <_printf_i+0x150>
 8003ee6:	682b      	ldr	r3, [r5, #0]
 8003ee8:	1d1a      	adds	r2, r3, #4
 8003eea:	602a      	str	r2, [r5, #0]
 8003eec:	681d      	ldr	r5, [r3, #0]
 8003eee:	6862      	ldr	r2, [r4, #4]
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	f7fc f96c 	bl	80001d0 <memchr>
 8003ef8:	b108      	cbz	r0, 8003efe <_printf_i+0x1f2>
 8003efa:	1b40      	subs	r0, r0, r5
 8003efc:	6060      	str	r0, [r4, #4]
 8003efe:	6863      	ldr	r3, [r4, #4]
 8003f00:	6123      	str	r3, [r4, #16]
 8003f02:	2300      	movs	r3, #0
 8003f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f08:	e7a8      	b.n	8003e5c <_printf_i+0x150>
 8003f0a:	6923      	ldr	r3, [r4, #16]
 8003f0c:	462a      	mov	r2, r5
 8003f0e:	4649      	mov	r1, r9
 8003f10:	4640      	mov	r0, r8
 8003f12:	47d0      	blx	sl
 8003f14:	3001      	adds	r0, #1
 8003f16:	d0ab      	beq.n	8003e70 <_printf_i+0x164>
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	079b      	lsls	r3, r3, #30
 8003f1c:	d413      	bmi.n	8003f46 <_printf_i+0x23a>
 8003f1e:	68e0      	ldr	r0, [r4, #12]
 8003f20:	9b03      	ldr	r3, [sp, #12]
 8003f22:	4298      	cmp	r0, r3
 8003f24:	bfb8      	it	lt
 8003f26:	4618      	movlt	r0, r3
 8003f28:	e7a4      	b.n	8003e74 <_printf_i+0x168>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	4632      	mov	r2, r6
 8003f2e:	4649      	mov	r1, r9
 8003f30:	4640      	mov	r0, r8
 8003f32:	47d0      	blx	sl
 8003f34:	3001      	adds	r0, #1
 8003f36:	d09b      	beq.n	8003e70 <_printf_i+0x164>
 8003f38:	3501      	adds	r5, #1
 8003f3a:	68e3      	ldr	r3, [r4, #12]
 8003f3c:	9903      	ldr	r1, [sp, #12]
 8003f3e:	1a5b      	subs	r3, r3, r1
 8003f40:	42ab      	cmp	r3, r5
 8003f42:	dcf2      	bgt.n	8003f2a <_printf_i+0x21e>
 8003f44:	e7eb      	b.n	8003f1e <_printf_i+0x212>
 8003f46:	2500      	movs	r5, #0
 8003f48:	f104 0619 	add.w	r6, r4, #25
 8003f4c:	e7f5      	b.n	8003f3a <_printf_i+0x22e>
 8003f4e:	bf00      	nop
 8003f50:	08004635 	.word	0x08004635
 8003f54:	08004646 	.word	0x08004646

08003f58 <_sbrk_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4d06      	ldr	r5, [pc, #24]	; (8003f74 <_sbrk_r+0x1c>)
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	4604      	mov	r4, r0
 8003f60:	4608      	mov	r0, r1
 8003f62:	602b      	str	r3, [r5, #0]
 8003f64:	f7fc fda6 	bl	8000ab4 <_sbrk>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d102      	bne.n	8003f72 <_sbrk_r+0x1a>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	b103      	cbz	r3, 8003f72 <_sbrk_r+0x1a>
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	20000148 	.word	0x20000148

08003f78 <__sread>:
 8003f78:	b510      	push	{r4, lr}
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f80:	f000 fab2 	bl	80044e8 <_read_r>
 8003f84:	2800      	cmp	r0, #0
 8003f86:	bfab      	itete	ge
 8003f88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f8c:	181b      	addge	r3, r3, r0
 8003f8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f92:	bfac      	ite	ge
 8003f94:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f96:	81a3      	strhlt	r3, [r4, #12]
 8003f98:	bd10      	pop	{r4, pc}

08003f9a <__swrite>:
 8003f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9e:	461f      	mov	r7, r3
 8003fa0:	898b      	ldrh	r3, [r1, #12]
 8003fa2:	05db      	lsls	r3, r3, #23
 8003fa4:	4605      	mov	r5, r0
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	4616      	mov	r6, r2
 8003faa:	d505      	bpl.n	8003fb8 <__swrite+0x1e>
 8003fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f000 f9c8 	bl	8004348 <_lseek_r>
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fc2:	81a3      	strh	r3, [r4, #12]
 8003fc4:	4632      	mov	r2, r6
 8003fc6:	463b      	mov	r3, r7
 8003fc8:	4628      	mov	r0, r5
 8003fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fce:	f000 b869 	b.w	80040a4 <_write_r>

08003fd2 <__sseek>:
 8003fd2:	b510      	push	{r4, lr}
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fda:	f000 f9b5 	bl	8004348 <_lseek_r>
 8003fde:	1c43      	adds	r3, r0, #1
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	bf15      	itete	ne
 8003fe4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fee:	81a3      	strheq	r3, [r4, #12]
 8003ff0:	bf18      	it	ne
 8003ff2:	81a3      	strhne	r3, [r4, #12]
 8003ff4:	bd10      	pop	{r4, pc}

08003ff6 <__sclose>:
 8003ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ffa:	f000 b8d3 	b.w	80041a4 <_close_r>
	...

08004000 <__swbuf_r>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	460e      	mov	r6, r1
 8004004:	4614      	mov	r4, r2
 8004006:	4605      	mov	r5, r0
 8004008:	b118      	cbz	r0, 8004012 <__swbuf_r+0x12>
 800400a:	6983      	ldr	r3, [r0, #24]
 800400c:	b90b      	cbnz	r3, 8004012 <__swbuf_r+0x12>
 800400e:	f7ff fb81 	bl	8003714 <__sinit>
 8004012:	4b21      	ldr	r3, [pc, #132]	; (8004098 <__swbuf_r+0x98>)
 8004014:	429c      	cmp	r4, r3
 8004016:	d12b      	bne.n	8004070 <__swbuf_r+0x70>
 8004018:	686c      	ldr	r4, [r5, #4]
 800401a:	69a3      	ldr	r3, [r4, #24]
 800401c:	60a3      	str	r3, [r4, #8]
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	071a      	lsls	r2, r3, #28
 8004022:	d52f      	bpl.n	8004084 <__swbuf_r+0x84>
 8004024:	6923      	ldr	r3, [r4, #16]
 8004026:	b36b      	cbz	r3, 8004084 <__swbuf_r+0x84>
 8004028:	6923      	ldr	r3, [r4, #16]
 800402a:	6820      	ldr	r0, [r4, #0]
 800402c:	1ac0      	subs	r0, r0, r3
 800402e:	6963      	ldr	r3, [r4, #20]
 8004030:	b2f6      	uxtb	r6, r6
 8004032:	4283      	cmp	r3, r0
 8004034:	4637      	mov	r7, r6
 8004036:	dc04      	bgt.n	8004042 <__swbuf_r+0x42>
 8004038:	4621      	mov	r1, r4
 800403a:	4628      	mov	r0, r5
 800403c:	f000 f948 	bl	80042d0 <_fflush_r>
 8004040:	bb30      	cbnz	r0, 8004090 <__swbuf_r+0x90>
 8004042:	68a3      	ldr	r3, [r4, #8]
 8004044:	3b01      	subs	r3, #1
 8004046:	60a3      	str	r3, [r4, #8]
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	6022      	str	r2, [r4, #0]
 800404e:	701e      	strb	r6, [r3, #0]
 8004050:	6963      	ldr	r3, [r4, #20]
 8004052:	3001      	adds	r0, #1
 8004054:	4283      	cmp	r3, r0
 8004056:	d004      	beq.n	8004062 <__swbuf_r+0x62>
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	07db      	lsls	r3, r3, #31
 800405c:	d506      	bpl.n	800406c <__swbuf_r+0x6c>
 800405e:	2e0a      	cmp	r6, #10
 8004060:	d104      	bne.n	800406c <__swbuf_r+0x6c>
 8004062:	4621      	mov	r1, r4
 8004064:	4628      	mov	r0, r5
 8004066:	f000 f933 	bl	80042d0 <_fflush_r>
 800406a:	b988      	cbnz	r0, 8004090 <__swbuf_r+0x90>
 800406c:	4638      	mov	r0, r7
 800406e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <__swbuf_r+0x9c>)
 8004072:	429c      	cmp	r4, r3
 8004074:	d101      	bne.n	800407a <__swbuf_r+0x7a>
 8004076:	68ac      	ldr	r4, [r5, #8]
 8004078:	e7cf      	b.n	800401a <__swbuf_r+0x1a>
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <__swbuf_r+0xa0>)
 800407c:	429c      	cmp	r4, r3
 800407e:	bf08      	it	eq
 8004080:	68ec      	ldreq	r4, [r5, #12]
 8004082:	e7ca      	b.n	800401a <__swbuf_r+0x1a>
 8004084:	4621      	mov	r1, r4
 8004086:	4628      	mov	r0, r5
 8004088:	f000 f81e 	bl	80040c8 <__swsetup_r>
 800408c:	2800      	cmp	r0, #0
 800408e:	d0cb      	beq.n	8004028 <__swbuf_r+0x28>
 8004090:	f04f 37ff 	mov.w	r7, #4294967295
 8004094:	e7ea      	b.n	800406c <__swbuf_r+0x6c>
 8004096:	bf00      	nop
 8004098:	080045e4 	.word	0x080045e4
 800409c:	08004604 	.word	0x08004604
 80040a0:	080045c4 	.word	0x080045c4

080040a4 <_write_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4d07      	ldr	r5, [pc, #28]	; (80040c4 <_write_r+0x20>)
 80040a8:	4604      	mov	r4, r0
 80040aa:	4608      	mov	r0, r1
 80040ac:	4611      	mov	r1, r2
 80040ae:	2200      	movs	r2, #0
 80040b0:	602a      	str	r2, [r5, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f7fc fbb6 	bl	8000824 <_write>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d102      	bne.n	80040c2 <_write_r+0x1e>
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	b103      	cbz	r3, 80040c2 <_write_r+0x1e>
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	bd38      	pop	{r3, r4, r5, pc}
 80040c4:	20000148 	.word	0x20000148

080040c8 <__swsetup_r>:
 80040c8:	4b32      	ldr	r3, [pc, #200]	; (8004194 <__swsetup_r+0xcc>)
 80040ca:	b570      	push	{r4, r5, r6, lr}
 80040cc:	681d      	ldr	r5, [r3, #0]
 80040ce:	4606      	mov	r6, r0
 80040d0:	460c      	mov	r4, r1
 80040d2:	b125      	cbz	r5, 80040de <__swsetup_r+0x16>
 80040d4:	69ab      	ldr	r3, [r5, #24]
 80040d6:	b913      	cbnz	r3, 80040de <__swsetup_r+0x16>
 80040d8:	4628      	mov	r0, r5
 80040da:	f7ff fb1b 	bl	8003714 <__sinit>
 80040de:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <__swsetup_r+0xd0>)
 80040e0:	429c      	cmp	r4, r3
 80040e2:	d10f      	bne.n	8004104 <__swsetup_r+0x3c>
 80040e4:	686c      	ldr	r4, [r5, #4]
 80040e6:	89a3      	ldrh	r3, [r4, #12]
 80040e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040ec:	0719      	lsls	r1, r3, #28
 80040ee:	d42c      	bmi.n	800414a <__swsetup_r+0x82>
 80040f0:	06dd      	lsls	r5, r3, #27
 80040f2:	d411      	bmi.n	8004118 <__swsetup_r+0x50>
 80040f4:	2309      	movs	r3, #9
 80040f6:	6033      	str	r3, [r6, #0]
 80040f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040fc:	81a3      	strh	r3, [r4, #12]
 80040fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004102:	e03e      	b.n	8004182 <__swsetup_r+0xba>
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <__swsetup_r+0xd4>)
 8004106:	429c      	cmp	r4, r3
 8004108:	d101      	bne.n	800410e <__swsetup_r+0x46>
 800410a:	68ac      	ldr	r4, [r5, #8]
 800410c:	e7eb      	b.n	80040e6 <__swsetup_r+0x1e>
 800410e:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <__swsetup_r+0xd8>)
 8004110:	429c      	cmp	r4, r3
 8004112:	bf08      	it	eq
 8004114:	68ec      	ldreq	r4, [r5, #12]
 8004116:	e7e6      	b.n	80040e6 <__swsetup_r+0x1e>
 8004118:	0758      	lsls	r0, r3, #29
 800411a:	d512      	bpl.n	8004142 <__swsetup_r+0x7a>
 800411c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800411e:	b141      	cbz	r1, 8004132 <__swsetup_r+0x6a>
 8004120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004124:	4299      	cmp	r1, r3
 8004126:	d002      	beq.n	800412e <__swsetup_r+0x66>
 8004128:	4630      	mov	r0, r6
 800412a:	f000 f991 	bl	8004450 <_free_r>
 800412e:	2300      	movs	r3, #0
 8004130:	6363      	str	r3, [r4, #52]	; 0x34
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004138:	81a3      	strh	r3, [r4, #12]
 800413a:	2300      	movs	r3, #0
 800413c:	6063      	str	r3, [r4, #4]
 800413e:	6923      	ldr	r3, [r4, #16]
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	f043 0308 	orr.w	r3, r3, #8
 8004148:	81a3      	strh	r3, [r4, #12]
 800414a:	6923      	ldr	r3, [r4, #16]
 800414c:	b94b      	cbnz	r3, 8004162 <__swsetup_r+0x9a>
 800414e:	89a3      	ldrh	r3, [r4, #12]
 8004150:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004158:	d003      	beq.n	8004162 <__swsetup_r+0x9a>
 800415a:	4621      	mov	r1, r4
 800415c:	4630      	mov	r0, r6
 800415e:	f000 f92b 	bl	80043b8 <__smakebuf_r>
 8004162:	89a0      	ldrh	r0, [r4, #12]
 8004164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004168:	f010 0301 	ands.w	r3, r0, #1
 800416c:	d00a      	beq.n	8004184 <__swsetup_r+0xbc>
 800416e:	2300      	movs	r3, #0
 8004170:	60a3      	str	r3, [r4, #8]
 8004172:	6963      	ldr	r3, [r4, #20]
 8004174:	425b      	negs	r3, r3
 8004176:	61a3      	str	r3, [r4, #24]
 8004178:	6923      	ldr	r3, [r4, #16]
 800417a:	b943      	cbnz	r3, 800418e <__swsetup_r+0xc6>
 800417c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004180:	d1ba      	bne.n	80040f8 <__swsetup_r+0x30>
 8004182:	bd70      	pop	{r4, r5, r6, pc}
 8004184:	0781      	lsls	r1, r0, #30
 8004186:	bf58      	it	pl
 8004188:	6963      	ldrpl	r3, [r4, #20]
 800418a:	60a3      	str	r3, [r4, #8]
 800418c:	e7f4      	b.n	8004178 <__swsetup_r+0xb0>
 800418e:	2000      	movs	r0, #0
 8004190:	e7f7      	b.n	8004182 <__swsetup_r+0xba>
 8004192:	bf00      	nop
 8004194:	2000000c 	.word	0x2000000c
 8004198:	080045e4 	.word	0x080045e4
 800419c:	08004604 	.word	0x08004604
 80041a0:	080045c4 	.word	0x080045c4

080041a4 <_close_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4d06      	ldr	r5, [pc, #24]	; (80041c0 <_close_r+0x1c>)
 80041a8:	2300      	movs	r3, #0
 80041aa:	4604      	mov	r4, r0
 80041ac:	4608      	mov	r0, r1
 80041ae:	602b      	str	r3, [r5, #0]
 80041b0:	f7fc fc4b 	bl	8000a4a <_close>
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	d102      	bne.n	80041be <_close_r+0x1a>
 80041b8:	682b      	ldr	r3, [r5, #0]
 80041ba:	b103      	cbz	r3, 80041be <_close_r+0x1a>
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	bd38      	pop	{r3, r4, r5, pc}
 80041c0:	20000148 	.word	0x20000148

080041c4 <__sflush_r>:
 80041c4:	898a      	ldrh	r2, [r1, #12]
 80041c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ca:	4605      	mov	r5, r0
 80041cc:	0710      	lsls	r0, r2, #28
 80041ce:	460c      	mov	r4, r1
 80041d0:	d458      	bmi.n	8004284 <__sflush_r+0xc0>
 80041d2:	684b      	ldr	r3, [r1, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	dc05      	bgt.n	80041e4 <__sflush_r+0x20>
 80041d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	dc02      	bgt.n	80041e4 <__sflush_r+0x20>
 80041de:	2000      	movs	r0, #0
 80041e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041e6:	2e00      	cmp	r6, #0
 80041e8:	d0f9      	beq.n	80041de <__sflush_r+0x1a>
 80041ea:	2300      	movs	r3, #0
 80041ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041f0:	682f      	ldr	r7, [r5, #0]
 80041f2:	602b      	str	r3, [r5, #0]
 80041f4:	d032      	beq.n	800425c <__sflush_r+0x98>
 80041f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	075a      	lsls	r2, r3, #29
 80041fc:	d505      	bpl.n	800420a <__sflush_r+0x46>
 80041fe:	6863      	ldr	r3, [r4, #4]
 8004200:	1ac0      	subs	r0, r0, r3
 8004202:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004204:	b10b      	cbz	r3, 800420a <__sflush_r+0x46>
 8004206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004208:	1ac0      	subs	r0, r0, r3
 800420a:	2300      	movs	r3, #0
 800420c:	4602      	mov	r2, r0
 800420e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004210:	6a21      	ldr	r1, [r4, #32]
 8004212:	4628      	mov	r0, r5
 8004214:	47b0      	blx	r6
 8004216:	1c43      	adds	r3, r0, #1
 8004218:	89a3      	ldrh	r3, [r4, #12]
 800421a:	d106      	bne.n	800422a <__sflush_r+0x66>
 800421c:	6829      	ldr	r1, [r5, #0]
 800421e:	291d      	cmp	r1, #29
 8004220:	d82c      	bhi.n	800427c <__sflush_r+0xb8>
 8004222:	4a2a      	ldr	r2, [pc, #168]	; (80042cc <__sflush_r+0x108>)
 8004224:	40ca      	lsrs	r2, r1
 8004226:	07d6      	lsls	r6, r2, #31
 8004228:	d528      	bpl.n	800427c <__sflush_r+0xb8>
 800422a:	2200      	movs	r2, #0
 800422c:	6062      	str	r2, [r4, #4]
 800422e:	04d9      	lsls	r1, r3, #19
 8004230:	6922      	ldr	r2, [r4, #16]
 8004232:	6022      	str	r2, [r4, #0]
 8004234:	d504      	bpl.n	8004240 <__sflush_r+0x7c>
 8004236:	1c42      	adds	r2, r0, #1
 8004238:	d101      	bne.n	800423e <__sflush_r+0x7a>
 800423a:	682b      	ldr	r3, [r5, #0]
 800423c:	b903      	cbnz	r3, 8004240 <__sflush_r+0x7c>
 800423e:	6560      	str	r0, [r4, #84]	; 0x54
 8004240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004242:	602f      	str	r7, [r5, #0]
 8004244:	2900      	cmp	r1, #0
 8004246:	d0ca      	beq.n	80041de <__sflush_r+0x1a>
 8004248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800424c:	4299      	cmp	r1, r3
 800424e:	d002      	beq.n	8004256 <__sflush_r+0x92>
 8004250:	4628      	mov	r0, r5
 8004252:	f000 f8fd 	bl	8004450 <_free_r>
 8004256:	2000      	movs	r0, #0
 8004258:	6360      	str	r0, [r4, #52]	; 0x34
 800425a:	e7c1      	b.n	80041e0 <__sflush_r+0x1c>
 800425c:	6a21      	ldr	r1, [r4, #32]
 800425e:	2301      	movs	r3, #1
 8004260:	4628      	mov	r0, r5
 8004262:	47b0      	blx	r6
 8004264:	1c41      	adds	r1, r0, #1
 8004266:	d1c7      	bne.n	80041f8 <__sflush_r+0x34>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0c4      	beq.n	80041f8 <__sflush_r+0x34>
 800426e:	2b1d      	cmp	r3, #29
 8004270:	d001      	beq.n	8004276 <__sflush_r+0xb2>
 8004272:	2b16      	cmp	r3, #22
 8004274:	d101      	bne.n	800427a <__sflush_r+0xb6>
 8004276:	602f      	str	r7, [r5, #0]
 8004278:	e7b1      	b.n	80041de <__sflush_r+0x1a>
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004280:	81a3      	strh	r3, [r4, #12]
 8004282:	e7ad      	b.n	80041e0 <__sflush_r+0x1c>
 8004284:	690f      	ldr	r7, [r1, #16]
 8004286:	2f00      	cmp	r7, #0
 8004288:	d0a9      	beq.n	80041de <__sflush_r+0x1a>
 800428a:	0793      	lsls	r3, r2, #30
 800428c:	680e      	ldr	r6, [r1, #0]
 800428e:	bf08      	it	eq
 8004290:	694b      	ldreq	r3, [r1, #20]
 8004292:	600f      	str	r7, [r1, #0]
 8004294:	bf18      	it	ne
 8004296:	2300      	movne	r3, #0
 8004298:	eba6 0807 	sub.w	r8, r6, r7
 800429c:	608b      	str	r3, [r1, #8]
 800429e:	f1b8 0f00 	cmp.w	r8, #0
 80042a2:	dd9c      	ble.n	80041de <__sflush_r+0x1a>
 80042a4:	6a21      	ldr	r1, [r4, #32]
 80042a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042a8:	4643      	mov	r3, r8
 80042aa:	463a      	mov	r2, r7
 80042ac:	4628      	mov	r0, r5
 80042ae:	47b0      	blx	r6
 80042b0:	2800      	cmp	r0, #0
 80042b2:	dc06      	bgt.n	80042c2 <__sflush_r+0xfe>
 80042b4:	89a3      	ldrh	r3, [r4, #12]
 80042b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ba:	81a3      	strh	r3, [r4, #12]
 80042bc:	f04f 30ff 	mov.w	r0, #4294967295
 80042c0:	e78e      	b.n	80041e0 <__sflush_r+0x1c>
 80042c2:	4407      	add	r7, r0
 80042c4:	eba8 0800 	sub.w	r8, r8, r0
 80042c8:	e7e9      	b.n	800429e <__sflush_r+0xda>
 80042ca:	bf00      	nop
 80042cc:	20400001 	.word	0x20400001

080042d0 <_fflush_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	690b      	ldr	r3, [r1, #16]
 80042d4:	4605      	mov	r5, r0
 80042d6:	460c      	mov	r4, r1
 80042d8:	b913      	cbnz	r3, 80042e0 <_fflush_r+0x10>
 80042da:	2500      	movs	r5, #0
 80042dc:	4628      	mov	r0, r5
 80042de:	bd38      	pop	{r3, r4, r5, pc}
 80042e0:	b118      	cbz	r0, 80042ea <_fflush_r+0x1a>
 80042e2:	6983      	ldr	r3, [r0, #24]
 80042e4:	b90b      	cbnz	r3, 80042ea <_fflush_r+0x1a>
 80042e6:	f7ff fa15 	bl	8003714 <__sinit>
 80042ea:	4b14      	ldr	r3, [pc, #80]	; (800433c <_fflush_r+0x6c>)
 80042ec:	429c      	cmp	r4, r3
 80042ee:	d11b      	bne.n	8004328 <_fflush_r+0x58>
 80042f0:	686c      	ldr	r4, [r5, #4]
 80042f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0ef      	beq.n	80042da <_fflush_r+0xa>
 80042fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042fc:	07d0      	lsls	r0, r2, #31
 80042fe:	d404      	bmi.n	800430a <_fflush_r+0x3a>
 8004300:	0599      	lsls	r1, r3, #22
 8004302:	d402      	bmi.n	800430a <_fflush_r+0x3a>
 8004304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004306:	f7ff faa3 	bl	8003850 <__retarget_lock_acquire_recursive>
 800430a:	4628      	mov	r0, r5
 800430c:	4621      	mov	r1, r4
 800430e:	f7ff ff59 	bl	80041c4 <__sflush_r>
 8004312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004314:	07da      	lsls	r2, r3, #31
 8004316:	4605      	mov	r5, r0
 8004318:	d4e0      	bmi.n	80042dc <_fflush_r+0xc>
 800431a:	89a3      	ldrh	r3, [r4, #12]
 800431c:	059b      	lsls	r3, r3, #22
 800431e:	d4dd      	bmi.n	80042dc <_fflush_r+0xc>
 8004320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004322:	f7ff fa96 	bl	8003852 <__retarget_lock_release_recursive>
 8004326:	e7d9      	b.n	80042dc <_fflush_r+0xc>
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <_fflush_r+0x70>)
 800432a:	429c      	cmp	r4, r3
 800432c:	d101      	bne.n	8004332 <_fflush_r+0x62>
 800432e:	68ac      	ldr	r4, [r5, #8]
 8004330:	e7df      	b.n	80042f2 <_fflush_r+0x22>
 8004332:	4b04      	ldr	r3, [pc, #16]	; (8004344 <_fflush_r+0x74>)
 8004334:	429c      	cmp	r4, r3
 8004336:	bf08      	it	eq
 8004338:	68ec      	ldreq	r4, [r5, #12]
 800433a:	e7da      	b.n	80042f2 <_fflush_r+0x22>
 800433c:	080045e4 	.word	0x080045e4
 8004340:	08004604 	.word	0x08004604
 8004344:	080045c4 	.word	0x080045c4

08004348 <_lseek_r>:
 8004348:	b538      	push	{r3, r4, r5, lr}
 800434a:	4d07      	ldr	r5, [pc, #28]	; (8004368 <_lseek_r+0x20>)
 800434c:	4604      	mov	r4, r0
 800434e:	4608      	mov	r0, r1
 8004350:	4611      	mov	r1, r2
 8004352:	2200      	movs	r2, #0
 8004354:	602a      	str	r2, [r5, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	f7fc fb9e 	bl	8000a98 <_lseek>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d102      	bne.n	8004366 <_lseek_r+0x1e>
 8004360:	682b      	ldr	r3, [r5, #0]
 8004362:	b103      	cbz	r3, 8004366 <_lseek_r+0x1e>
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	bd38      	pop	{r3, r4, r5, pc}
 8004368:	20000148 	.word	0x20000148

0800436c <__swhatbuf_r>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	460e      	mov	r6, r1
 8004370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004374:	2900      	cmp	r1, #0
 8004376:	b096      	sub	sp, #88	; 0x58
 8004378:	4614      	mov	r4, r2
 800437a:	461d      	mov	r5, r3
 800437c:	da08      	bge.n	8004390 <__swhatbuf_r+0x24>
 800437e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	602a      	str	r2, [r5, #0]
 8004386:	061a      	lsls	r2, r3, #24
 8004388:	d410      	bmi.n	80043ac <__swhatbuf_r+0x40>
 800438a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800438e:	e00e      	b.n	80043ae <__swhatbuf_r+0x42>
 8004390:	466a      	mov	r2, sp
 8004392:	f000 f8bb 	bl	800450c <_fstat_r>
 8004396:	2800      	cmp	r0, #0
 8004398:	dbf1      	blt.n	800437e <__swhatbuf_r+0x12>
 800439a:	9a01      	ldr	r2, [sp, #4]
 800439c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80043a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80043a4:	425a      	negs	r2, r3
 80043a6:	415a      	adcs	r2, r3
 80043a8:	602a      	str	r2, [r5, #0]
 80043aa:	e7ee      	b.n	800438a <__swhatbuf_r+0x1e>
 80043ac:	2340      	movs	r3, #64	; 0x40
 80043ae:	2000      	movs	r0, #0
 80043b0:	6023      	str	r3, [r4, #0]
 80043b2:	b016      	add	sp, #88	; 0x58
 80043b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080043b8 <__smakebuf_r>:
 80043b8:	898b      	ldrh	r3, [r1, #12]
 80043ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043bc:	079d      	lsls	r5, r3, #30
 80043be:	4606      	mov	r6, r0
 80043c0:	460c      	mov	r4, r1
 80043c2:	d507      	bpl.n	80043d4 <__smakebuf_r+0x1c>
 80043c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043c8:	6023      	str	r3, [r4, #0]
 80043ca:	6123      	str	r3, [r4, #16]
 80043cc:	2301      	movs	r3, #1
 80043ce:	6163      	str	r3, [r4, #20]
 80043d0:	b002      	add	sp, #8
 80043d2:	bd70      	pop	{r4, r5, r6, pc}
 80043d4:	ab01      	add	r3, sp, #4
 80043d6:	466a      	mov	r2, sp
 80043d8:	f7ff ffc8 	bl	800436c <__swhatbuf_r>
 80043dc:	9900      	ldr	r1, [sp, #0]
 80043de:	4605      	mov	r5, r0
 80043e0:	4630      	mov	r0, r6
 80043e2:	f7ff fa57 	bl	8003894 <_malloc_r>
 80043e6:	b948      	cbnz	r0, 80043fc <__smakebuf_r+0x44>
 80043e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ec:	059a      	lsls	r2, r3, #22
 80043ee:	d4ef      	bmi.n	80043d0 <__smakebuf_r+0x18>
 80043f0:	f023 0303 	bic.w	r3, r3, #3
 80043f4:	f043 0302 	orr.w	r3, r3, #2
 80043f8:	81a3      	strh	r3, [r4, #12]
 80043fa:	e7e3      	b.n	80043c4 <__smakebuf_r+0xc>
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <__smakebuf_r+0x7c>)
 80043fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	6020      	str	r0, [r4, #0]
 8004404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004408:	81a3      	strh	r3, [r4, #12]
 800440a:	9b00      	ldr	r3, [sp, #0]
 800440c:	6163      	str	r3, [r4, #20]
 800440e:	9b01      	ldr	r3, [sp, #4]
 8004410:	6120      	str	r0, [r4, #16]
 8004412:	b15b      	cbz	r3, 800442c <__smakebuf_r+0x74>
 8004414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004418:	4630      	mov	r0, r6
 800441a:	f000 f889 	bl	8004530 <_isatty_r>
 800441e:	b128      	cbz	r0, 800442c <__smakebuf_r+0x74>
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	81a3      	strh	r3, [r4, #12]
 800442c:	89a0      	ldrh	r0, [r4, #12]
 800442e:	4305      	orrs	r5, r0
 8004430:	81a5      	strh	r5, [r4, #12]
 8004432:	e7cd      	b.n	80043d0 <__smakebuf_r+0x18>
 8004434:	080036ad 	.word	0x080036ad

08004438 <__malloc_lock>:
 8004438:	4801      	ldr	r0, [pc, #4]	; (8004440 <__malloc_lock+0x8>)
 800443a:	f7ff ba09 	b.w	8003850 <__retarget_lock_acquire_recursive>
 800443e:	bf00      	nop
 8004440:	2000013c 	.word	0x2000013c

08004444 <__malloc_unlock>:
 8004444:	4801      	ldr	r0, [pc, #4]	; (800444c <__malloc_unlock+0x8>)
 8004446:	f7ff ba04 	b.w	8003852 <__retarget_lock_release_recursive>
 800444a:	bf00      	nop
 800444c:	2000013c 	.word	0x2000013c

08004450 <_free_r>:
 8004450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004452:	2900      	cmp	r1, #0
 8004454:	d044      	beq.n	80044e0 <_free_r+0x90>
 8004456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800445a:	9001      	str	r0, [sp, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	f1a1 0404 	sub.w	r4, r1, #4
 8004462:	bfb8      	it	lt
 8004464:	18e4      	addlt	r4, r4, r3
 8004466:	f7ff ffe7 	bl	8004438 <__malloc_lock>
 800446a:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <_free_r+0x94>)
 800446c:	9801      	ldr	r0, [sp, #4]
 800446e:	6813      	ldr	r3, [r2, #0]
 8004470:	b933      	cbnz	r3, 8004480 <_free_r+0x30>
 8004472:	6063      	str	r3, [r4, #4]
 8004474:	6014      	str	r4, [r2, #0]
 8004476:	b003      	add	sp, #12
 8004478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800447c:	f7ff bfe2 	b.w	8004444 <__malloc_unlock>
 8004480:	42a3      	cmp	r3, r4
 8004482:	d908      	bls.n	8004496 <_free_r+0x46>
 8004484:	6825      	ldr	r5, [r4, #0]
 8004486:	1961      	adds	r1, r4, r5
 8004488:	428b      	cmp	r3, r1
 800448a:	bf01      	itttt	eq
 800448c:	6819      	ldreq	r1, [r3, #0]
 800448e:	685b      	ldreq	r3, [r3, #4]
 8004490:	1949      	addeq	r1, r1, r5
 8004492:	6021      	streq	r1, [r4, #0]
 8004494:	e7ed      	b.n	8004472 <_free_r+0x22>
 8004496:	461a      	mov	r2, r3
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	b10b      	cbz	r3, 80044a0 <_free_r+0x50>
 800449c:	42a3      	cmp	r3, r4
 800449e:	d9fa      	bls.n	8004496 <_free_r+0x46>
 80044a0:	6811      	ldr	r1, [r2, #0]
 80044a2:	1855      	adds	r5, r2, r1
 80044a4:	42a5      	cmp	r5, r4
 80044a6:	d10b      	bne.n	80044c0 <_free_r+0x70>
 80044a8:	6824      	ldr	r4, [r4, #0]
 80044aa:	4421      	add	r1, r4
 80044ac:	1854      	adds	r4, r2, r1
 80044ae:	42a3      	cmp	r3, r4
 80044b0:	6011      	str	r1, [r2, #0]
 80044b2:	d1e0      	bne.n	8004476 <_free_r+0x26>
 80044b4:	681c      	ldr	r4, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	6053      	str	r3, [r2, #4]
 80044ba:	4421      	add	r1, r4
 80044bc:	6011      	str	r1, [r2, #0]
 80044be:	e7da      	b.n	8004476 <_free_r+0x26>
 80044c0:	d902      	bls.n	80044c8 <_free_r+0x78>
 80044c2:	230c      	movs	r3, #12
 80044c4:	6003      	str	r3, [r0, #0]
 80044c6:	e7d6      	b.n	8004476 <_free_r+0x26>
 80044c8:	6825      	ldr	r5, [r4, #0]
 80044ca:	1961      	adds	r1, r4, r5
 80044cc:	428b      	cmp	r3, r1
 80044ce:	bf04      	itt	eq
 80044d0:	6819      	ldreq	r1, [r3, #0]
 80044d2:	685b      	ldreq	r3, [r3, #4]
 80044d4:	6063      	str	r3, [r4, #4]
 80044d6:	bf04      	itt	eq
 80044d8:	1949      	addeq	r1, r1, r5
 80044da:	6021      	streq	r1, [r4, #0]
 80044dc:	6054      	str	r4, [r2, #4]
 80044de:	e7ca      	b.n	8004476 <_free_r+0x26>
 80044e0:	b003      	add	sp, #12
 80044e2:	bd30      	pop	{r4, r5, pc}
 80044e4:	20000140 	.word	0x20000140

080044e8 <_read_r>:
 80044e8:	b538      	push	{r3, r4, r5, lr}
 80044ea:	4d07      	ldr	r5, [pc, #28]	; (8004508 <_read_r+0x20>)
 80044ec:	4604      	mov	r4, r0
 80044ee:	4608      	mov	r0, r1
 80044f0:	4611      	mov	r1, r2
 80044f2:	2200      	movs	r2, #0
 80044f4:	602a      	str	r2, [r5, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	f7fc fa8a 	bl	8000a10 <_read>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	d102      	bne.n	8004506 <_read_r+0x1e>
 8004500:	682b      	ldr	r3, [r5, #0]
 8004502:	b103      	cbz	r3, 8004506 <_read_r+0x1e>
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	bd38      	pop	{r3, r4, r5, pc}
 8004508:	20000148 	.word	0x20000148

0800450c <_fstat_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	4d07      	ldr	r5, [pc, #28]	; (800452c <_fstat_r+0x20>)
 8004510:	2300      	movs	r3, #0
 8004512:	4604      	mov	r4, r0
 8004514:	4608      	mov	r0, r1
 8004516:	4611      	mov	r1, r2
 8004518:	602b      	str	r3, [r5, #0]
 800451a:	f7fc faa2 	bl	8000a62 <_fstat>
 800451e:	1c43      	adds	r3, r0, #1
 8004520:	d102      	bne.n	8004528 <_fstat_r+0x1c>
 8004522:	682b      	ldr	r3, [r5, #0]
 8004524:	b103      	cbz	r3, 8004528 <_fstat_r+0x1c>
 8004526:	6023      	str	r3, [r4, #0]
 8004528:	bd38      	pop	{r3, r4, r5, pc}
 800452a:	bf00      	nop
 800452c:	20000148 	.word	0x20000148

08004530 <_isatty_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	4d06      	ldr	r5, [pc, #24]	; (800454c <_isatty_r+0x1c>)
 8004534:	2300      	movs	r3, #0
 8004536:	4604      	mov	r4, r0
 8004538:	4608      	mov	r0, r1
 800453a:	602b      	str	r3, [r5, #0]
 800453c:	f7fc faa1 	bl	8000a82 <_isatty>
 8004540:	1c43      	adds	r3, r0, #1
 8004542:	d102      	bne.n	800454a <_isatty_r+0x1a>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	b103      	cbz	r3, 800454a <_isatty_r+0x1a>
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	bd38      	pop	{r3, r4, r5, pc}
 800454c:	20000148 	.word	0x20000148

08004550 <_init>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	bf00      	nop
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr

0800455c <_fini>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	bf00      	nop
 8004560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004562:	bc08      	pop	{r3}
 8004564:	469e      	mov	lr, r3
 8004566:	4770      	bx	lr
